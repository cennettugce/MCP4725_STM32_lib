
MCP4725_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c88  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005208  08005208  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005210  08005210  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08005224  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08005224  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f643  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eef  00000000  00000000  0002f6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  000315b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcf  00000000  00000000  00032498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000168c3  00000000  00000000  00033067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011416  00000000  00000000  0004992a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090915  00000000  00000000  0005ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042ac  00000000  00000000  000eb658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ef904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004e08 	.word	0x08004e08

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004e08 	.word	0x08004e08

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b970 	b.w	8000d0c <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9e08      	ldr	r6, [sp, #32]
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	460f      	mov	r7, r1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d14a      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4694      	mov	ip, r2
 8000a58:	d965      	bls.n	8000b26 <__udivmoddi4+0xe2>
 8000a5a:	fab2 f382 	clz	r3, r2
 8000a5e:	b143      	cbz	r3, 8000a72 <__udivmoddi4+0x2e>
 8000a60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a64:	f1c3 0220 	rsb	r2, r3, #32
 8000a68:	409f      	lsls	r7, r3
 8000a6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a6e:	4317      	orrs	r7, r2
 8000a70:	409c      	lsls	r4, r3
 8000a72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a76:	fa1f f58c 	uxth.w	r5, ip
 8000a7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a7e:	0c22      	lsrs	r2, r4, #16
 8000a80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a88:	fb01 f005 	mul.w	r0, r1, r5
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x62>
 8000a90:	eb1c 0202 	adds.w	r2, ip, r2
 8000a94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a98:	f080 811c 	bcs.w	8000cd4 <__udivmoddi4+0x290>
 8000a9c:	4290      	cmp	r0, r2
 8000a9e:	f240 8119 	bls.w	8000cd4 <__udivmoddi4+0x290>
 8000aa2:	3902      	subs	r1, #2
 8000aa4:	4462      	add	r2, ip
 8000aa6:	1a12      	subs	r2, r2, r0
 8000aa8:	b2a4      	uxth	r4, r4
 8000aaa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ab2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ab6:	fb00 f505 	mul.w	r5, r0, r5
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	d90a      	bls.n	8000ad4 <__udivmoddi4+0x90>
 8000abe:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ac6:	f080 8107 	bcs.w	8000cd8 <__udivmoddi4+0x294>
 8000aca:	42a5      	cmp	r5, r4
 8000acc:	f240 8104 	bls.w	8000cd8 <__udivmoddi4+0x294>
 8000ad0:	4464      	add	r4, ip
 8000ad2:	3802      	subs	r0, #2
 8000ad4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad8:	1b64      	subs	r4, r4, r5
 8000ada:	2100      	movs	r1, #0
 8000adc:	b11e      	cbz	r6, 8000ae6 <__udivmoddi4+0xa2>
 8000ade:	40dc      	lsrs	r4, r3
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0xbc>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	f000 80ed 	beq.w	8000cce <__udivmoddi4+0x28a>
 8000af4:	2100      	movs	r1, #0
 8000af6:	e9c6 0500 	strd	r0, r5, [r6]
 8000afa:	4608      	mov	r0, r1
 8000afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b00:	fab3 f183 	clz	r1, r3
 8000b04:	2900      	cmp	r1, #0
 8000b06:	d149      	bne.n	8000b9c <__udivmoddi4+0x158>
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	d302      	bcc.n	8000b12 <__udivmoddi4+0xce>
 8000b0c:	4282      	cmp	r2, r0
 8000b0e:	f200 80f8 	bhi.w	8000d02 <__udivmoddi4+0x2be>
 8000b12:	1a84      	subs	r4, r0, r2
 8000b14:	eb65 0203 	sbc.w	r2, r5, r3
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4617      	mov	r7, r2
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d0e2      	beq.n	8000ae6 <__udivmoddi4+0xa2>
 8000b20:	e9c6 4700 	strd	r4, r7, [r6]
 8000b24:	e7df      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000b26:	b902      	cbnz	r2, 8000b2a <__udivmoddi4+0xe6>
 8000b28:	deff      	udf	#255	; 0xff
 8000b2a:	fab2 f382 	clz	r3, r2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 8090 	bne.w	8000c54 <__udivmoddi4+0x210>
 8000b34:	1a8a      	subs	r2, r1, r2
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b44:	fb07 2015 	mls	r0, r7, r5, r2
 8000b48:	0c22      	lsrs	r2, r4, #16
 8000b4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b4e:	fb0e f005 	mul.w	r0, lr, r5
 8000b52:	4290      	cmp	r0, r2
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x124>
 8000b56:	eb1c 0202 	adds.w	r2, ip, r2
 8000b5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x122>
 8000b60:	4290      	cmp	r0, r2
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2b8>
 8000b66:	4645      	mov	r5, r8
 8000b68:	1a12      	subs	r2, r2, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b70:	fb07 2210 	mls	r2, r7, r0, r2
 8000b74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x14e>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x14c>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2c2>
 8000b90:	4610      	mov	r0, r2
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b9a:	e79f      	b.n	8000adc <__udivmoddi4+0x98>
 8000b9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ba0:	408b      	lsls	r3, r1
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa05 f401 	lsl.w	r4, r5, r1
 8000bae:	fa20 f307 	lsr.w	r3, r0, r7
 8000bb2:	40fd      	lsrs	r5, r7
 8000bb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb8:	4323      	orrs	r3, r4
 8000bba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bbe:	fa1f fe8c 	uxth.w	lr, ip
 8000bc2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bc6:	0c1c      	lsrs	r4, r3, #16
 8000bc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bcc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bd0:	42a5      	cmp	r5, r4
 8000bd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b0>
 8000bdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2b4>
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2b4>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4464      	add	r4, ip
 8000bf4:	1b64      	subs	r4, r4, r5
 8000bf6:	b29d      	uxth	r5, r3
 8000bf8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bfc:	fb09 4413 	mls	r4, r9, r3, r4
 8000c00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1da>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2ac>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2ac>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	4464      	add	r4, ip
 8000c1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c22:	fba3 9502 	umull	r9, r5, r3, r2
 8000c26:	eba4 040e 	sub.w	r4, r4, lr
 8000c2a:	42ac      	cmp	r4, r5
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46ae      	mov	lr, r5
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x29c>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x298>
 8000c34:	b156      	cbz	r6, 8000c4c <__udivmoddi4+0x208>
 8000c36:	ebb0 0208 	subs.w	r2, r0, r8
 8000c3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c42:	40ca      	lsrs	r2, r1
 8000c44:	40cc      	lsrs	r4, r1
 8000c46:	4317      	orrs	r7, r2
 8000c48:	e9c6 7400 	strd	r7, r4, [r6]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c54:	f1c3 0120 	rsb	r1, r3, #32
 8000c58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c60:	fa25 f101 	lsr.w	r1, r5, r1
 8000c64:	409d      	lsls	r5, r3
 8000c66:	432a      	orrs	r2, r5
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c74:	fb07 1510 	mls	r5, r7, r0, r1
 8000c78:	0c11      	lsrs	r1, r2, #16
 8000c7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c82:	428d      	cmp	r5, r1
 8000c84:	fa04 f403 	lsl.w	r4, r4, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x258>
 8000c8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000c94:	428d      	cmp	r5, r1
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	1b49      	subs	r1, r1, r5
 8000c9e:	b292      	uxth	r2, r2
 8000ca0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ca4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cac:	fb05 f10e 	mul.w	r1, r5, lr
 8000cb0:	4291      	cmp	r1, r2
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x282>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2a8>
 8000cbe:	4291      	cmp	r1, r2
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2a8>
 8000cc2:	3d02      	subs	r5, #2
 8000cc4:	4462      	add	r2, ip
 8000cc6:	1a52      	subs	r2, r2, r1
 8000cc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0xfc>
 8000cce:	4631      	mov	r1, r6
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	e708      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000cd4:	4639      	mov	r1, r7
 8000cd6:	e6e6      	b.n	8000aa6 <__udivmoddi4+0x62>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	e6fb      	b.n	8000ad4 <__udivmoddi4+0x90>
 8000cdc:	4548      	cmp	r0, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f0>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f0>
 8000cec:	4645      	mov	r5, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x282>
 8000cf0:	462b      	mov	r3, r5
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1da>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x258>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b0>
 8000cfc:	3d02      	subs	r5, #2
 8000cfe:	4462      	add	r2, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x124>
 8000d02:	4608      	mov	r0, r1
 8000d04:	e70a      	b.n	8000b1c <__udivmoddi4+0xd8>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x14e>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	ed87 0a00 	vstr	s0, [r7]
 8000d20:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	ed97 0a00 	vldr	s0, [r7]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f822 	bl	8000d80 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	461c      	mov	r4, r3
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}

08000d52 <MCP4725_isConnected>:

    Check the connection 
*/
/**************************************************************************/ 
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	791b      	ldrb	r3, [r3, #4]
 8000d62:	b299      	uxth	r1, r3
 8000d64:	2364      	movs	r3, #100	; 0x64
 8000d66:	2202      	movs	r2, #2
 8000d68:	f001 fc6e 	bl	8002648 <HAL_I2C_IsDeviceReady>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bf0c      	ite	eq
 8000d72:	2301      	moveq	r3, #1
 8000d74:	2300      	movne	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8000d8c:	edd7 7a00 	vldr	s15, [r7]
 8000d90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d98:	d103      	bne.n	8000da2 <MCP4725_setReferenceVoltage+0x22>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <MCP4725_setReferenceVoltage+0x50>)
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	e002      	b.n	8000da8 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	ed93 7a02 	vldr	s14, [r3, #8]
 8000dae:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000dd4 <MCP4725_setReferenceVoltage+0x54>
 8000db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dba:	ee17 3a90 	vmov	r3, s15
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	819a      	strh	r2, [r3, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40533333 	.word	0x40533333
 8000dd4:	45800000 	.word	0x45800000

08000dd8 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	4608      	mov	r0, r1
 8000de2:	4611      	mov	r1, r2
 8000de4:	461a      	mov	r2, r3
 8000de6:	4603      	mov	r3, r0
 8000de8:	807b      	strh	r3, [r7, #2]
 8000dea:	460b      	mov	r3, r1
 8000dec:	707b      	strb	r3, [r7, #1]
 8000dee:	4613      	mov	r3, r2
 8000df0:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8000df2:	783b      	ldrb	r3, [r7, #0]
 8000df4:	787a      	ldrb	r2, [r7, #1]
 8000df6:	8879      	ldrh	r1, [r7, #2]
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f822 	bl	8000e42 <MCP4725_writeComand>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 8000e10:	2101      	movs	r1, #1
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 f895 	bl	8000f42 <MCP4725_readRegister>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) {return (value & 0x80)==0x80;}		//1 - completed, 0 - incompleted
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d008      	beq.n	8000e38 <MCP4725_getEepromBusyFlag+0x30>
 8000e26:	89fb      	ldrh	r3, [r7, #14]
 8000e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2301      	movne	r3, #1
 8000e32:	2300      	moveq	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	e000      	b.n	8000e3a <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af02      	add	r7, sp, #8
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4603      	mov	r3, r0
 8000e52:	807b      	strh	r3, [r7, #2]
 8000e54:	460b      	mov	r3, r1
 8000e56:	707b      	strb	r3, [r7, #1]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b60      	cmp	r3, #96	; 0x60
 8000e60:	d028      	beq.n	8000eb4 <MCP4725_writeComand+0x72>
 8000e62:	2b60      	cmp	r3, #96	; 0x60
 8000e64:	dc4a      	bgt.n	8000efc <MCP4725_writeComand+0xba>
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <MCP4725_writeComand+0x2e>
 8000e6a:	2b40      	cmp	r3, #64	; 0x40
 8000e6c:	d022      	beq.n	8000eb4 <MCP4725_writeComand+0x72>
 8000e6e:	e045      	b.n	8000efc <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8000e70:	783b      	ldrb	r3, [r7, #0]
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	b25a      	sxtb	r2, r3
 8000e76:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b25a      	sxtb	r2, r3
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	791b      	ldrb	r3, [r3, #4]
 8000e9c:	b299      	uxth	r1, r3
 8000e9e:	f107 020c 	add.w	r2, r7, #12
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f001 f89d 	bl	8001fe8 <HAL_I2C_Master_Transmit>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]
		
      break;
 8000eb2:	e023      	b.n	8000efc <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 8000eba:	783b      	ldrb	r3, [r7, #0]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	0a1b      	lsrs	r3, r3, #8
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	791b      	ldrb	r3, [r3, #4]
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	f107 020c 	add.w	r2, r7, #12
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	f001 f879 	bl	8001fe8 <HAL_I2C_Master_Transmit>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73fb      	strb	r3, [r7, #15]
		
			break;
 8000efa:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MCP4725_writeComand+0xc4>
 8000f02:	2300      	movs	r3, #0
 8000f04:	e019      	b.n	8000f3a <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 8000f06:	787b      	ldrb	r3, [r7, #1]
 8000f08:	2b60      	cmp	r3, #96	; 0x60
 8000f0a:	d115      	bne.n	8000f38 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff7b 	bl	8000e08 <MCP4725_getEepromBusyFlag>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <MCP4725_writeComand+0xda>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e00e      	b.n	8000f3a <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 8000f1c:	2019      	movs	r0, #25
 8000f1e:	f000 fc4b 	bl	80017b8 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ff70 	bl	8000e08 <MCP4725_getEepromBusyFlag>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <MCP4725_writeComand+0xf0>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e003      	b.n	8000f3a <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 8000f32:	2019      	movs	r0, #25
 8000f34:	f000 fc40 	bl	80017b8 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8000f38:	2301      	movs	r3, #1
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 8000f42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
 8000f50:	466b      	mov	r3, sp
 8000f52:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8000f5c:	78f9      	ldrb	r1, [r7, #3]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	3b01      	subs	r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	b2cb      	uxtb	r3, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	4698      	mov	r8, r3
 8000f6a:	4691      	mov	r9, r2
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f80:	b2cb      	uxtb	r3, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	461c      	mov	r4, r3
 8000f86:	4615      	mov	r5, r2
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	00eb      	lsls	r3, r5, #3
 8000f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f96:	00e2      	lsls	r2, r4, #3
 8000f98:	460b      	mov	r3, r1
 8000f9a:	3307      	adds	r3, #7
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	ebad 0d03 	sub.w	sp, sp, r3
 8000fa4:	ab02      	add	r3, sp, #8
 8000fa6:	3300      	adds	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	791b      	ldrb	r3, [r3, #4]
 8000fb2:	b299      	uxth	r1, r3
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fbc:	9200      	str	r2, [sp, #0]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	f001 f910 	bl	80021e4 <HAL_I2C_Master_Receive>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <MCP4725_readRegister+0x92>
 8000fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd2:	e01f      	b.n	8001014 <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	d00a      	beq.n	8000ff0 <MCP4725_readRegister+0xae>
 8000fda:	2b05      	cmp	r3, #5
 8000fdc:	dc19      	bgt.n	8001012 <MCP4725_readRegister+0xd0>
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d002      	beq.n	8000fe8 <MCP4725_readRegister+0xa6>
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d004      	beq.n	8000ff0 <MCP4725_readRegister+0xae>
 8000fe6:	e014      	b.n	8001012 <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	82fb      	strh	r3, [r7, #22]

      break;
 8000fee:	e010      	b.n	8001012 <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 8000ff0:	8abb      	ldrh	r3, [r7, #20]
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	5cd3      	ldrb	r3, [r2, r3]
 8000ff8:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 8000ffa:	8afb      	ldrh	r3, [r7, #22]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	8abb      	ldrh	r3, [r7, #20]
 8001002:	3b01      	subs	r3, #1
 8001004:	68f9      	ldr	r1, [r7, #12]
 8001006:	5ccb      	ldrb	r3, [r1, r3]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21b      	sxth	r3, r3
 800100e:	82fb      	strh	r3, [r7, #22]
      break;
 8001010:	bf00      	nop
  }

  return ret_val;
 8001012:	8afb      	ldrh	r3, [r7, #22]
 8001014:	46b5      	mov	sp, r6
}
 8001016:	4618      	mov	r0, r3
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fb55 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f829 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f90d 	bl	800124c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001032:	f000 f8e1 	bl	80011f8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001036:	f000 f88d 	bl	8001154 <MX_I2C2_Init>
  MX_TIM10_Init();
 800103a:	f000 f8b9 	bl	80011b0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  // Second, initilaize the MCP4725 object:
  		myMCP4725 = MCP4725_init(&hi2c2, MCP4725A0_ADDR_A00, 3.30);
 800103e:	4c0c      	ldr	r4, [pc, #48]	; (8001070 <main+0x50>)
 8001040:	463b      	mov	r3, r7
 8001042:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001074 <main+0x54>
 8001046:	2260      	movs	r2, #96	; 0x60
 8001048:	490b      	ldr	r1, [pc, #44]	; (8001078 <main+0x58>)
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fe60 	bl	8000d10 <MCP4725_init>
 8001050:	463b      	mov	r3, r7
 8001052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  		// Check the connection:
  		if(MCP4725_isConnected(&myMCP4725)){
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <main+0x50>)
 800105a:	f7ff fe7a 	bl	8000d52 <MCP4725_isConnected>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <main+0x48>

  			/* Print that the DAC is coonected */
  			uint8_t aa = 5;
 8001064:	2305      	movs	r3, #5
 8001066:	75fb      	strb	r3, [r7, #23]
  			/* Print that the DAC is NOT coonected */

  		}

  		// Starting the timer:
  		HAL_TIM_Base_Start_IT(&htim10);
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <main+0x5c>)
 800106a:	f002 fc89 	bl	8003980 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800106e:	e7fe      	b.n	800106e <main+0x4e>
 8001070:	20000114 	.word	0x20000114
 8001074:	40533333 	.word	0x40533333
 8001078:	20000030 	.word	0x20000030
 800107c:	20000084 	.word	0x20000084

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	; 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2230      	movs	r2, #48	; 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f003 f954 	bl	800433c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b28      	ldr	r3, [pc, #160]	; (800114c <SystemClock_Config+0xcc>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a27      	ldr	r2, [pc, #156]	; (800114c <SystemClock_Config+0xcc>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <SystemClock_Config+0xcc>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <SystemClock_Config+0xd0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a21      	ldr	r2, [pc, #132]	; (8001150 <SystemClock_Config+0xd0>)
 80010ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <SystemClock_Config+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010dc:	2302      	movs	r3, #2
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e4:	2310      	movs	r3, #16
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010f0:	2310      	movs	r3, #16
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010fa:	2304      	movs	r3, #4
 80010fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010fe:	2304      	movs	r3, #4
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	4618      	mov	r0, r3
 8001108:	f001 ff52 	bl	8002fb0 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001112:	f000 f977 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f002 f9b4 	bl	80034a0 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800113e:	f000 f961 	bl	8001404 <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	; 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_I2C2_Init+0x50>)
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <MX_I2C2_Init+0x54>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_I2C2_Init+0x58>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_I2C2_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001176:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_I2C2_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_I2C2_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001192:	f000 fde5 	bl	8001d60 <HAL_I2C_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 f932 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000030 	.word	0x20000030
 80011a8:	40005800 	.word	0x40005800
 80011ac:	000186a0 	.word	0x000186a0

080011b0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_TIM10_Init+0x40>)
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <MX_TIM10_Init+0x44>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <MX_TIM10_Init+0x40>)
 80011bc:	2253      	movs	r2, #83	; 0x53
 80011be:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_TIM10_Init+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_TIM10_Init+0x40>)
 80011c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80011cc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_TIM10_Init+0x40>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_TIM10_Init+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_TIM10_Init+0x40>)
 80011dc:	f002 fb80 	bl	80038e0 <HAL_TIM_Base_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80011e6:	f000 f90d 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000084 	.word	0x20000084
 80011f4:	40014400 	.word	0x40014400

080011f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_USART2_UART_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001230:	f002 fdc0 	bl	8003db4 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f000 f8e3 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200000cc 	.word	0x200000cc
 8001248:	40004400 	.word	0x40004400

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <MX_GPIO_Init+0xd0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a2c      	ldr	r2, [pc, #176]	; (800131c <MX_GPIO_Init+0xd0>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_GPIO_Init+0xd0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <MX_GPIO_Init+0xd0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a25      	ldr	r2, [pc, #148]	; (800131c <MX_GPIO_Init+0xd0>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <MX_GPIO_Init+0xd0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_GPIO_Init+0xd0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <MX_GPIO_Init+0xd0>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_GPIO_Init+0xd0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a17      	ldr	r2, [pc, #92]	; (800131c <MX_GPIO_Init+0xd0>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_GPIO_Init+0xd0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	4812      	ldr	r0, [pc, #72]	; (8001320 <MX_GPIO_Init+0xd4>)
 80012d8:	f000 fd28 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_GPIO_Init+0xd8>)
 80012f4:	f000 fb96 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012f8:	2320      	movs	r3, #32
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_GPIO_Init+0xd4>)
 8001310:	f000 fb88 	bl	8001a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020800 	.word	0x40020800

08001328 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	// Create a 100Hz sine wave:
	if(htim == &htim10){
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d13b      	bne.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0x88>
	timeval  = __HAL_TIM_GET_COUNTER(&htim10);
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	4a23      	ldr	r2, [pc, #140]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001340:	6013      	str	r3, [r2, #0]
	sinval = sinf( 2 * 3.141592 * 100 * (micro_seconds++) / 10000.0 ) * 2047 + 2048;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	4921      	ldr	r1, [pc, #132]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800134a:	600a      	str	r2, [r1, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f885 	bl	800045c <__aeabi_ui2d>
 8001352:	a319      	add	r3, pc, #100	; (adr r3, 80013b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f8fa 	bl	8000550 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	a316      	add	r3, pc, #88	; (adr r3, 80013c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff fa1b 	bl	80007a4 <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fafd 	bl	8000974 <__aeabi_d2f>
 800137a:	4603      	mov	r3, r0
 800137c:	ee00 3a10 	vmov	s0, r3
 8001380:	f003 f808 	bl	8004394 <sinf>
 8001384:	eef0 7a40 	vmov.f32	s15, s0
 8001388:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013d4 <HAL_TIM_PeriodElapsedCallback+0xac>
 800138c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001390:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80013d8 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8001394:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800139c:	ee17 3a90 	vmov	r3, s15
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80013a4:	801a      	strh	r2, [r3, #0]
	setValue((uint16_t)( sinval ));
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f818 	bl	80013e0 <setValue>
	}
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	154c985f 	.word	0x154c985f
 80013bc:	4083a28c 	.word	0x4083a28c
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40c38800 	.word	0x40c38800
 80013c8:	20000084 	.word	0x20000084
 80013cc:	20000028 	.word	0x20000028
 80013d0:	20000124 	.word	0x20000124
 80013d4:	44ffe000 	.word	0x44ffe000
 80013d8:	45000000 	.word	0x45000000
 80013dc:	2000002c 	.word	0x2000002c

080013e0 <setValue>:

uint8_t setValue(uint16_t value){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
	return MCP4725_setValue(&myMCP4725, value, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80013ea:	88f9      	ldrh	r1, [r7, #6]
 80013ec:	2300      	movs	r3, #0
 80013ee:	2200      	movs	r2, #0
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <setValue+0x20>)
 80013f2:	f7ff fcf1 	bl	8000dd8 <MCP4725_setValue>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000114 	.word	0x20000114

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	e7fe      	b.n	800140c <Error_Handler+0x8>
	...

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_MspInit+0x4c>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_MspInit+0x4c>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800144e:	2007      	movs	r0, #7
 8001450:	f000 faa6 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a22      	ldr	r2, [pc, #136]	; (8001508 <HAL_I2C_MspInit+0xa8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d13d      	bne.n	80014fe <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_I2C_MspInit+0xac>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a20      	ldr	r2, [pc, #128]	; (800150c <HAL_I2C_MspInit+0xac>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_I2C_MspInit+0xac>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800149e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a4:	2312      	movs	r3, #18
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014b0:	2304      	movs	r3, #4
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4815      	ldr	r0, [pc, #84]	; (8001510 <HAL_I2C_MspInit+0xb0>)
 80014bc:	f000 fab2 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c6:	2312      	movs	r3, #18
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014d2:	2309      	movs	r3, #9
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <HAL_I2C_MspInit+0xb0>)
 80014de:	f000 faa1 	bl	8001a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_I2C_MspInit+0xac>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_I2C_MspInit+0xac>)
 80014ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_I2C_MspInit+0xac>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40005800 	.word	0x40005800
 800150c:	40023800 	.word	0x40023800
 8001510:	40020400 	.word	0x40020400

08001514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_TIM_Base_MspInit+0x48>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d115      	bne.n	8001552 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_TIM_Base_MspInit+0x4c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_TIM_Base_MspInit+0x4c>)
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_TIM_Base_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2019      	movs	r0, #25
 8001548:	f000 fa35 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800154c:	2019      	movs	r0, #25
 800154e:	f000 fa4e 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40014400 	.word	0x40014400
 8001560:	40023800 	.word	0x40023800

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_UART_MspInit+0x84>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12b      	bne.n	80015de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_UART_MspInit+0x88>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_UART_MspInit+0x88>)
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_UART_MspInit+0x88>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_UART_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_UART_MspInit+0x88>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_UART_MspInit+0x88>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015be:	230c      	movs	r3, #12
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ce:	2307      	movs	r3, #7
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_UART_MspInit+0x8c>)
 80015da:	f000 fa23 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 f89a 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800164e:	f002 f9f9 	bl	8003a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000084 	.word	0x20000084

0800165c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <SystemInit+0x20>)
 8001662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <SystemInit+0x20>)
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001684:	f7ff ffea 	bl	800165c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	; (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ae:	f002 fe4d 	bl	800434c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7ff fcb5 	bl	8001020 <main>
  bx  lr    
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016c4:	08005218 	.word	0x08005218
  ldr r2, =_sbss
 80016c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016cc:	2000012c 	.word	0x2000012c

080016d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <HAL_Init+0x40>)
 80016de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_Init+0x40>)
 80016ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <HAL_Init+0x40>)
 80016f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 f94f 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001702:	2000      	movs	r0, #0
 8001704:	f000 f808 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff fe82 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_InitTick+0x54>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x58>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f967 	bl	8001a0a <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f92f 	bl	80019b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <HAL_InitTick+0x5c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000000 	.word	0x20000000
 8001770:	20000008 	.word	0x20000008
 8001774:	20000004 	.word	0x20000004

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008
 800179c:	20000128 	.word	0x20000128

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000128 	.word	0x20000128

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff ffee 	bl	80017a0 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_Delay+0x44>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60d3      	str	r3, [r2, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db0b      	blt.n	800188e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4907      	ldr	r1, [pc, #28]	; (800189c <__NVIC_EnableIRQ+0x38>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f7ff ff8e 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff29 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff3e 	bl	8001848 <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff8e 	bl	80018f4 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5d 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff31 	bl	8001864 <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffa2 	bl	800195c <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e159      	b.n	8001cf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 8148 	bne.w	8001cee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d005      	beq.n	8001a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d130      	bne.n	8001ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d017      	beq.n	8001b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d123      	bne.n	8001b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a2 	beq.w	8001cee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <HAL_GPIO_Init+0x2e8>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a56      	ldr	r2, [pc, #344]	; (8001d0c <HAL_GPIO_Init+0x2e8>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b54      	ldr	r3, [pc, #336]	; (8001d0c <HAL_GPIO_Init+0x2e8>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <HAL_GPIO_Init+0x2f0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d019      	beq.n	8001c26 <HAL_GPIO_Init+0x202>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_GPIO_Init+0x2f4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0x1fe>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a47      	ldr	r2, [pc, #284]	; (8001d1c <HAL_GPIO_Init+0x2f8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x1fa>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a46      	ldr	r2, [pc, #280]	; (8001d20 <HAL_GPIO_Init+0x2fc>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x1f6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a45      	ldr	r2, [pc, #276]	; (8001d24 <HAL_GPIO_Init+0x300>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x1f2>
 8001c12:	2304      	movs	r3, #4
 8001c14:	e008      	b.n	8001c28 <HAL_GPIO_Init+0x204>
 8001c16:	2307      	movs	r3, #7
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x204>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x204>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x204>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x204>
 8001c26:	2300      	movs	r3, #0
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	f002 0203 	and.w	r2, r2, #3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c38:	4935      	ldr	r1, [pc, #212]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c46:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6a:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cbe:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_GPIO_Init+0x304>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	f67f aea2 	bls.w	8001a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40013c00 	.word	0x40013c00

08001d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d3c:	787b      	ldrb	r3, [r7, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d48:	e003      	b.n	8001d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	041a      	lsls	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	619a      	str	r2, [r3, #24]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e12b      	b.n	8001fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fb6a 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	; 0x24
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dc4:	f001 fd64 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a81      	ldr	r2, [pc, #516]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d807      	bhi.n	8001de4 <HAL_I2C_Init+0x84>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a80      	ldr	r2, [pc, #512]	; (8001fd8 <HAL_I2C_Init+0x278>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bf94      	ite	ls
 8001ddc:	2301      	movls	r3, #1
 8001dde:	2300      	movhi	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e006      	b.n	8001df2 <HAL_I2C_Init+0x92>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a7d      	ldr	r2, [pc, #500]	; (8001fdc <HAL_I2C_Init+0x27c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0e7      	b.n	8001fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a78      	ldr	r2, [pc, #480]	; (8001fe0 <HAL_I2C_Init+0x280>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9b      	lsrs	r3, r3, #18
 8001e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a6a      	ldr	r2, [pc, #424]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d802      	bhi.n	8001e34 <HAL_I2C_Init+0xd4>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3301      	adds	r3, #1
 8001e32:	e009      	b.n	8001e48 <HAL_I2C_Init+0xe8>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	4a69      	ldr	r2, [pc, #420]	; (8001fe4 <HAL_I2C_Init+0x284>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	3301      	adds	r3, #1
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	495c      	ldr	r1, [pc, #368]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d819      	bhi.n	8001e9c <HAL_I2C_Init+0x13c>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e59      	subs	r1, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e76:	1c59      	adds	r1, r3, #1
 8001e78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_I2C_Init+0x138>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1e59      	subs	r1, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e96:	e051      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e04f      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <HAL_I2C_Init+0x168>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e012      	b.n	8001eee <HAL_I2C_Init+0x18e>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	0099      	lsls	r1, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Init+0x196>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e022      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10e      	bne.n	8001f1c <HAL_I2C_Init+0x1bc>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e58      	subs	r0, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	440b      	add	r3, r1
 8001f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1a:	e00f      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	6809      	ldr	r1, [r1, #0]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6911      	ldr	r1, [r2, #16]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68d2      	ldr	r2, [r2, #12]
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	000186a0 	.word	0x000186a0
 8001fd8:	001e847f 	.word	0x001e847f
 8001fdc:	003d08ff 	.word	0x003d08ff
 8001fe0:	431bde83 	.word	0x431bde83
 8001fe4:	10624dd3 	.word	0x10624dd3

08001fe8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	817b      	strh	r3, [r7, #10]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff fbd0 	bl	80017a0 <HAL_GetTick>
 8002000:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b20      	cmp	r3, #32
 800200c:	f040 80e0 	bne.w	80021d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2319      	movs	r3, #25
 8002016:	2201      	movs	r2, #1
 8002018:	4970      	ldr	r1, [pc, #448]	; (80021dc <HAL_I2C_Master_Transmit+0x1f4>)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fd92 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002026:	2302      	movs	r3, #2
 8002028:	e0d3      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_I2C_Master_Transmit+0x50>
 8002034:	2302      	movs	r3, #2
 8002036:	e0cc      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d007      	beq.n	800205e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2221      	movs	r2, #33	; 0x21
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2210      	movs	r2, #16
 800207a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	893a      	ldrh	r2, [r7, #8]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4a50      	ldr	r2, [pc, #320]	; (80021e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020a0:	8979      	ldrh	r1, [r7, #10]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	6a3a      	ldr	r2, [r7, #32]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fbfc 	bl	80028a4 <I2C_MasterRequestWrite>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e08d      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020cc:	e066      	b.n	800219c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	6a39      	ldr	r1, [r7, #32]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 fe50 	bl	8002d78 <I2C_WaitOnTXEFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00d      	beq.n	80020fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d107      	bne.n	80020f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e06b      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d11b      	bne.n	8002170 <HAL_I2C_Master_Transmit+0x188>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	d017      	beq.n	8002170 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	6a39      	ldr	r1, [r7, #32]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fe47 	bl	8002e08 <I2C_WaitOnBTFFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00d      	beq.n	800219c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	2b04      	cmp	r3, #4
 8002186:	d107      	bne.n	8002198 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e01a      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d194      	bne.n	80020ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e000      	b.n	80021d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021d0:	2302      	movs	r3, #2
  }
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	00100002 	.word	0x00100002
 80021e0:	ffff0000 	.word	0xffff0000

080021e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	461a      	mov	r2, r3
 80021f0:	460b      	mov	r3, r1
 80021f2:	817b      	strh	r3, [r7, #10]
 80021f4:	4613      	mov	r3, r2
 80021f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff fad2 	bl	80017a0 <HAL_GetTick>
 80021fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b20      	cmp	r3, #32
 8002208:	f040 8217 	bne.w	800263a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2319      	movs	r3, #25
 8002212:	2201      	movs	r2, #1
 8002214:	497c      	ldr	r1, [pc, #496]	; (8002408 <HAL_I2C_Master_Receive+0x224>)
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fc94 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
 8002224:	e20a      	b.n	800263c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_I2C_Master_Receive+0x50>
 8002230:	2302      	movs	r3, #2
 8002232:	e203      	b.n	800263c <HAL_I2C_Master_Receive+0x458>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d007      	beq.n	800225a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002268:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2222      	movs	r2, #34	; 0x22
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2210      	movs	r2, #16
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	893a      	ldrh	r2, [r7, #8]
 800228a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a5c      	ldr	r2, [pc, #368]	; (800240c <HAL_I2C_Master_Receive+0x228>)
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800229c:	8979      	ldrh	r1, [r7, #10]
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fb80 	bl	80029a8 <I2C_MasterRequestRead>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1c4      	b.n	800263c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d113      	bne.n	80022e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	623b      	str	r3, [r7, #32]
 80022ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e198      	b.n	8002614 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d11b      	bne.n	8002322 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e178      	b.n	8002614 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002326:	2b02      	cmp	r3, #2
 8002328:	d11b      	bne.n	8002362 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002338:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	e158      	b.n	8002614 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002388:	e144      	b.n	8002614 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238e:	2b03      	cmp	r3, #3
 8002390:	f200 80f1 	bhi.w	8002576 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	2b01      	cmp	r3, #1
 800239a:	d123      	bne.n	80023e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fd79 	bl	8002e98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e145      	b.n	800263c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023e2:	e117      	b.n	8002614 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d14e      	bne.n	800248a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	2200      	movs	r2, #0
 80023f4:	4906      	ldr	r1, [pc, #24]	; (8002410 <HAL_I2C_Master_Receive+0x22c>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fba4 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e11a      	b.n	800263c <HAL_I2C_Master_Receive+0x458>
 8002406:	bf00      	nop
 8002408:	00100002 	.word	0x00100002
 800240c:	ffff0000 	.word	0xffff0000
 8002410:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002488:	e0c4      	b.n	8002614 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	2200      	movs	r2, #0
 8002492:	496c      	ldr	r1, [pc, #432]	; (8002644 <HAL_I2C_Master_Receive+0x460>)
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fb55 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0cb      	b.n	800263c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	2200      	movs	r2, #0
 80024ee:	4955      	ldr	r1, [pc, #340]	; (8002644 <HAL_I2C_Master_Receive+0x460>)
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fb27 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e09d      	b.n	800263c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002574:	e04e      	b.n	8002614 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fc8c 	bl	8002e98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e058      	b.n	800263c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d124      	bne.n	8002614 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d107      	bne.n	80025e2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	f47f aeb6 	bne.w	800238a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	00010004 	.word	0x00010004

08002648 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	460b      	mov	r3, r1
 8002656:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff f8a2 	bl	80017a0 <HAL_GetTick>
 800265c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	f040 8111 	bne.w	8002892 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2319      	movs	r3, #25
 8002676:	2201      	movs	r2, #1
 8002678:	4988      	ldr	r1, [pc, #544]	; (800289c <HAL_I2C_IsDeviceReady+0x254>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fa62 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	e104      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_I2C_IsDeviceReady+0x50>
 8002694:	2302      	movs	r3, #2
 8002696:	e0fd      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d007      	beq.n	80026be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2224      	movs	r2, #36	; 0x24
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a70      	ldr	r2, [pc, #448]	; (80028a0 <HAL_I2C_IsDeviceReady+0x258>)
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fa20 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002718:	d103      	bne.n	8002722 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0b6      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002734:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002736:	f7ff f833 	bl	80017a0 <HAL_GetTick>
 800273a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b02      	cmp	r3, #2
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800276a:	e025      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800276c:	f7ff f818 	bl	80017a0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <HAL_I2C_IsDeviceReady+0x13a>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	22a0      	movs	r2, #160	; 0xa0
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2ba0      	cmp	r3, #160	; 0xa0
 80027c2:	d005      	beq.n	80027d0 <HAL_I2C_IsDeviceReady+0x188>
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_I2C_IsDeviceReady+0x188>
 80027ca:	7dbb      	ldrb	r3, [r7, #22]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0cd      	beq.n	800276c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d129      	bne.n	800283a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2319      	movs	r3, #25
 8002812:	2201      	movs	r2, #1
 8002814:	4921      	ldr	r1, [pc, #132]	; (800289c <HAL_I2C_IsDeviceReady+0x254>)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f994 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e036      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e02c      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002848:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002852:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2319      	movs	r3, #25
 800285a:	2201      	movs	r2, #1
 800285c:	490f      	ldr	r1, [pc, #60]	; (800289c <HAL_I2C_IsDeviceReady+0x254>)
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f970 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e012      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	3301      	adds	r3, #1
 8002872:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	f4ff af32 	bcc.w	80026e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3720      	adds	r7, #32
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	00100002 	.word	0x00100002
 80028a0:	ffff0000 	.word	0xffff0000

080028a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	460b      	mov	r3, r1
 80028b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d006      	beq.n	80028ce <I2C_MasterRequestWrite+0x2a>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d003      	beq.n	80028ce <I2C_MasterRequestWrite+0x2a>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028cc:	d108      	bne.n	80028e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e00b      	b.n	80028f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	2b12      	cmp	r3, #18
 80028e6:	d107      	bne.n	80028f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f91d 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291e:	d103      	bne.n	8002928 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e035      	b.n	8002998 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002934:	d108      	bne.n	8002948 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002944:	611a      	str	r2, [r3, #16]
 8002946:	e01b      	b.n	8002980 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002948:	897b      	ldrh	r3, [r7, #10]
 800294a:	11db      	asrs	r3, r3, #7
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 0306 	and.w	r3, r3, #6
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f063 030f 	orn	r3, r3, #15
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <I2C_MasterRequestWrite+0xfc>)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f966 	bl	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e010      	b.n	8002998 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4907      	ldr	r1, [pc, #28]	; (80029a4 <I2C_MasterRequestWrite+0x100>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f956 	bl	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	00010008 	.word	0x00010008
 80029a4:	00010002 	.word	0x00010002

080029a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	460b      	mov	r3, r1
 80029b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d006      	beq.n	80029e2 <I2C_MasterRequestRead+0x3a>
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d003      	beq.n	80029e2 <I2C_MasterRequestRead+0x3a>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029e0:	d108      	bne.n	80029f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e00b      	b.n	8002a0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	2b11      	cmp	r3, #17
 80029fa:	d107      	bne.n	8002a0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f893 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00d      	beq.n	8002a40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a32:	d103      	bne.n	8002a3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e079      	b.n	8002b34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a48:	d108      	bne.n	8002a5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a4a:	897b      	ldrh	r3, [r7, #10]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	611a      	str	r2, [r3, #16]
 8002a5a:	e05f      	b.n	8002b1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a5c:	897b      	ldrh	r3, [r7, #10]
 8002a5e:	11db      	asrs	r3, r3, #7
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f003 0306 	and.w	r3, r3, #6
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f063 030f 	orn	r3, r3, #15
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4930      	ldr	r1, [pc, #192]	; (8002b3c <I2C_MasterRequestRead+0x194>)
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f8dc 	bl	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e054      	b.n	8002b34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4929      	ldr	r1, [pc, #164]	; (8002b40 <I2C_MasterRequestRead+0x198>)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f8cc 	bl	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e044      	b.n	8002b34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ace:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f831 	bl	8002b44 <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af6:	d103      	bne.n	8002b00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e017      	b.n	8002b34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b04:	897b      	ldrh	r3, [r7, #10]
 8002b06:	11db      	asrs	r3, r3, #7
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f003 0306 	and.w	r3, r3, #6
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f063 030e 	orn	r3, r3, #14
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4907      	ldr	r1, [pc, #28]	; (8002b40 <I2C_MasterRequestRead+0x198>)
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f888 	bl	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	00010008 	.word	0x00010008
 8002b40:	00010002 	.word	0x00010002

08002b44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b54:	e048      	b.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d044      	beq.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5e:	f7fe fe1f 	bl	80017a0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d302      	bcc.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d139      	bne.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d10d      	bne.n	8002b9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	43da      	mvns	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	e00c      	b.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d116      	bne.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e023      	b.n	8002c30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	0c1b      	lsrs	r3, r3, #16
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10d      	bne.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	e00c      	b.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	43da      	mvns	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d093      	beq.n	8002b56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c46:	e071      	b.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c56:	d123      	bne.n	8002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f043 0204 	orr.w	r2, r3, #4
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e067      	b.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca6:	d041      	beq.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca8:	f7fe fd7a 	bl	80017a0 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d302      	bcc.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d136      	bne.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10c      	bne.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	e00b      	b.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e021      	b.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	0c1b      	lsrs	r3, r3, #16
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10c      	bne.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e00b      	b.n	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f47f af6d 	bne.w	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d84:	e034      	b.n	8002df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f8e3 	bl	8002f52 <I2C_IsAcknowledgeFailed>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e034      	b.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d028      	beq.n	8002df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7fe fcff 	bl	80017a0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d11d      	bne.n	8002df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d016      	beq.n	8002df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e007      	b.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b80      	cmp	r3, #128	; 0x80
 8002dfc:	d1c3      	bne.n	8002d86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e14:	e034      	b.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f89b 	bl	8002f52 <I2C_IsAcknowledgeFailed>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e034      	b.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d028      	beq.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2e:	f7fe fcb7 	bl	80017a0 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d302      	bcc.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d11d      	bne.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d016      	beq.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e007      	b.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d1c3      	bne.n	8002e16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ea4:	e049      	b.n	8002f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d119      	bne.n	8002ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0210 	mvn.w	r2, #16
 8002ebc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e030      	b.n	8002f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee8:	f7fe fc5a 	bl	80017a0 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d302      	bcc.n	8002efe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d11d      	bne.n	8002f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f08:	2b40      	cmp	r3, #64	; 0x40
 8002f0a:	d016      	beq.n	8002f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e007      	b.n	8002f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b40      	cmp	r3, #64	; 0x40
 8002f46:	d1ae      	bne.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d11b      	bne.n	8002fa2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f72:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f043 0204 	orr.w	r2, r3, #4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e267      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d075      	beq.n	80030ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fce:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fda:	4b85      	ldr	r3, [pc, #532]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d112      	bne.n	800300c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4b82      	ldr	r3, [pc, #520]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff2:	d10b      	bne.n	800300c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	4b7e      	ldr	r3, [pc, #504]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d05b      	beq.n	80030b8 <HAL_RCC_OscConfig+0x108>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d157      	bne.n	80030b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e242      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d106      	bne.n	8003024 <HAL_RCC_OscConfig+0x74>
 8003016:	4b76      	ldr	r3, [pc, #472]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a75      	ldr	r2, [pc, #468]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e01d      	b.n	8003060 <HAL_RCC_OscConfig+0xb0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x98>
 800302e:	4b70      	ldr	r3, [pc, #448]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a6f      	ldr	r2, [pc, #444]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	4b6d      	ldr	r3, [pc, #436]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a6c      	ldr	r2, [pc, #432]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0xb0>
 8003048:	4b69      	ldr	r3, [pc, #420]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a68      	ldr	r2, [pc, #416]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800304e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a65      	ldr	r2, [pc, #404]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800305a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe fb9a 	bl	80017a0 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe fb96 	bl	80017a0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e207      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b5b      	ldr	r3, [pc, #364]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0xc0>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7fe fb86 	bl	80017a0 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003098:	f7fe fb82 	bl	80017a0 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	; 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e1f3      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	4b51      	ldr	r3, [pc, #324]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0xe8>
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d063      	beq.n	800318e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c6:	4b4a      	ldr	r3, [pc, #296]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b47      	ldr	r3, [pc, #284]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d11c      	bne.n	8003118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030de:	4b44      	ldr	r3, [pc, #272]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d116      	bne.n	8003118 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_RCC_OscConfig+0x152>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e1c7      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003102:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4937      	ldr	r1, [pc, #220]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	e03a      	b.n	800318e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003120:	4b34      	ldr	r3, [pc, #208]	; (80031f4 <HAL_RCC_OscConfig+0x244>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fe fb3b 	bl	80017a0 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312e:	f7fe fb37 	bl	80017a0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1a8      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4925      	ldr	r1, [pc, #148]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]
 8003160:	e015      	b.n	800318e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCC_OscConfig+0x244>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe fb1a 	bl	80017a0 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003170:	f7fe fb16 	bl	80017a0 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e187      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d036      	beq.n	8003208 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_RCC_OscConfig+0x248>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe fafa 	bl	80017a0 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b0:	f7fe faf6 	bl	80017a0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e167      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_RCC_OscConfig+0x240>)
 80031c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x200>
 80031ce:	e01b      	b.n	8003208 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_RCC_OscConfig+0x248>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fae3 	bl	80017a0 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	e00e      	b.n	80031fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031de:	f7fe fadf 	bl	80017a0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d907      	bls.n	80031fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e150      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
 80031f0:	40023800 	.word	0x40023800
 80031f4:	42470000 	.word	0x42470000
 80031f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	4b88      	ldr	r3, [pc, #544]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ea      	bne.n	80031de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8097 	beq.w	8003344 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321a:	4b81      	ldr	r3, [pc, #516]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10f      	bne.n	8003246 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	4b7d      	ldr	r3, [pc, #500]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a7c      	ldr	r2, [pc, #496]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 8003230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b7a      	ldr	r3, [pc, #488]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003246:	4b77      	ldr	r3, [pc, #476]	; (8003424 <HAL_RCC_OscConfig+0x474>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d118      	bne.n	8003284 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003252:	4b74      	ldr	r3, [pc, #464]	; (8003424 <HAL_RCC_OscConfig+0x474>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a73      	ldr	r2, [pc, #460]	; (8003424 <HAL_RCC_OscConfig+0x474>)
 8003258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325e:	f7fe fa9f 	bl	80017a0 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003266:	f7fe fa9b 	bl	80017a0 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e10c      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <HAL_RCC_OscConfig+0x474>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x2ea>
 800328c:	4b64      	ldr	r3, [pc, #400]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	4a63      	ldr	r2, [pc, #396]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6713      	str	r3, [r2, #112]	; 0x70
 8003298:	e01c      	b.n	80032d4 <HAL_RCC_OscConfig+0x324>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x30c>
 80032a2:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a5e      	ldr	r2, [pc, #376]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80032a8:	f043 0304 	orr.w	r3, r3, #4
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70
 80032ae:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a5b      	ldr	r2, [pc, #364]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	e00b      	b.n	80032d4 <HAL_RCC_OscConfig+0x324>
 80032bc:	4b58      	ldr	r3, [pc, #352]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	4a57      	ldr	r2, [pc, #348]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	6713      	str	r3, [r2, #112]	; 0x70
 80032c8:	4b55      	ldr	r3, [pc, #340]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a54      	ldr	r2, [pc, #336]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80032ce:	f023 0304 	bic.w	r3, r3, #4
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d015      	beq.n	8003308 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032dc:	f7fe fa60 	bl	80017a0 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe fa5c 	bl	80017a0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e0cb      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	4b49      	ldr	r3, [pc, #292]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0ee      	beq.n	80032e4 <HAL_RCC_OscConfig+0x334>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003308:	f7fe fa4a 	bl	80017a0 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330e:	e00a      	b.n	8003326 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7fe fa46 	bl	80017a0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0b5      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	4b3e      	ldr	r3, [pc, #248]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ee      	bne.n	8003310 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003338:	4b39      	ldr	r3, [pc, #228]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	4a38      	ldr	r2, [pc, #224]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 800333e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003342:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80a1 	beq.w	8003490 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800334e:	4b34      	ldr	r3, [pc, #208]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b08      	cmp	r3, #8
 8003358:	d05c      	beq.n	8003414 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d141      	bne.n	80033e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b31      	ldr	r3, [pc, #196]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fa1a 	bl	80017a0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe fa16 	bl	80017a0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e087      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	4b27      	ldr	r3, [pc, #156]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	491b      	ldr	r1, [pc, #108]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fe f9ef 	bl	80017a0 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fe f9eb 	bl	80017a0 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e05c      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x416>
 80033e4:	e054      	b.n	8003490 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_RCC_OscConfig+0x478>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fe f9d8 	bl	80017a0 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fe f9d4 	bl	80017a0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e045      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_OscConfig+0x470>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x444>
 8003412:	e03d      	b.n	8003490 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d107      	bne.n	800342c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e038      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
 8003420:	40023800 	.word	0x40023800
 8003424:	40007000 	.word	0x40007000
 8003428:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_RCC_OscConfig+0x4ec>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d028      	beq.n	800348c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d121      	bne.n	800348c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d11a      	bne.n	800348c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800345c:	4013      	ands	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003462:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003464:	4293      	cmp	r3, r2
 8003466:	d111      	bne.n	800348c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	3b01      	subs	r3, #1
 8003476:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d107      	bne.n	800348c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800

080034a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0cc      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b68      	ldr	r3, [pc, #416]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d90c      	bls.n	80034dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b65      	ldr	r3, [pc, #404]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b63      	ldr	r3, [pc, #396]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0b8      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f4:	4b59      	ldr	r3, [pc, #356]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800350c:	4b53      	ldr	r3, [pc, #332]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a52      	ldr	r2, [pc, #328]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b50      	ldr	r3, [pc, #320]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	494d      	ldr	r1, [pc, #308]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d044      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	4b47      	ldr	r3, [pc, #284]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d119      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e07f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d003      	beq.n	800355e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355a:	2b03      	cmp	r3, #3
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b3f      	ldr	r3, [pc, #252]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e06f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b3b      	ldr	r3, [pc, #236]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e067      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b37      	ldr	r3, [pc, #220]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4934      	ldr	r1, [pc, #208]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7fe f906 	bl	80017a0 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	e00a      	b.n	80035ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7fe f902 	bl	80017a0 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e04f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2b      	ldr	r3, [pc, #172]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 020c 	and.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1eb      	bne.n	8003598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b25      	ldr	r3, [pc, #148]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d20c      	bcs.n	80035e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b22      	ldr	r3, [pc, #136]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e032      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4916      	ldr	r1, [pc, #88]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	490e      	ldr	r1, [pc, #56]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003626:	f000 f821 	bl	800366c <HAL_RCC_GetSysClockFreq>
 800362a:	4602      	mov	r2, r0
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	490a      	ldr	r1, [pc, #40]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	5ccb      	ldrb	r3, [r1, r3]
 800363a:	fa22 f303 	lsr.w	r3, r2, r3
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe f866 	bl	8001718 <HAL_InitTick>

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023c00 	.word	0x40023c00
 800365c:	40023800 	.word	0x40023800
 8003660:	08004e20 	.word	0x08004e20
 8003664:	20000000 	.word	0x20000000
 8003668:	20000004 	.word	0x20000004

0800366c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003670:	b094      	sub	sp, #80	; 0x50
 8003672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	647b      	str	r3, [r7, #68]	; 0x44
 8003678:	2300      	movs	r3, #0
 800367a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800367c:	2300      	movs	r3, #0
 800367e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003684:	4b79      	ldr	r3, [pc, #484]	; (800386c <HAL_RCC_GetSysClockFreq+0x200>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b08      	cmp	r3, #8
 800368e:	d00d      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x40>
 8003690:	2b08      	cmp	r3, #8
 8003692:	f200 80e1 	bhi.w	8003858 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x34>
 800369a:	2b04      	cmp	r3, #4
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800369e:	e0db      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a0:	4b73      	ldr	r3, [pc, #460]	; (8003870 <HAL_RCC_GetSysClockFreq+0x204>)
 80036a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036a4:	e0db      	b.n	800385e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a6:	4b73      	ldr	r3, [pc, #460]	; (8003874 <HAL_RCC_GetSysClockFreq+0x208>)
 80036a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036aa:	e0d8      	b.n	800385e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ac:	4b6f      	ldr	r3, [pc, #444]	; (800386c <HAL_RCC_GetSysClockFreq+0x200>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b6:	4b6d      	ldr	r3, [pc, #436]	; (800386c <HAL_RCC_GetSysClockFreq+0x200>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d063      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c2:	4b6a      	ldr	r3, [pc, #424]	; (800386c <HAL_RCC_GetSysClockFreq+0x200>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	2200      	movs	r2, #0
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80036cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d4:	633b      	str	r3, [r7, #48]	; 0x30
 80036d6:	2300      	movs	r3, #0
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
 80036da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036de:	4622      	mov	r2, r4
 80036e0:	462b      	mov	r3, r5
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f04f 0100 	mov.w	r1, #0
 80036ea:	0159      	lsls	r1, r3, #5
 80036ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f0:	0150      	lsls	r0, r2, #5
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4621      	mov	r1, r4
 80036f8:	1a51      	subs	r1, r2, r1
 80036fa:	6139      	str	r1, [r7, #16]
 80036fc:	4629      	mov	r1, r5
 80036fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003710:	4659      	mov	r1, fp
 8003712:	018b      	lsls	r3, r1, #6
 8003714:	4651      	mov	r1, sl
 8003716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800371a:	4651      	mov	r1, sl
 800371c:	018a      	lsls	r2, r1, #6
 800371e:	4651      	mov	r1, sl
 8003720:	ebb2 0801 	subs.w	r8, r2, r1
 8003724:	4659      	mov	r1, fp
 8003726:	eb63 0901 	sbc.w	r9, r3, r1
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800373a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800373e:	4690      	mov	r8, r2
 8003740:	4699      	mov	r9, r3
 8003742:	4623      	mov	r3, r4
 8003744:	eb18 0303 	adds.w	r3, r8, r3
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	462b      	mov	r3, r5
 800374c:	eb49 0303 	adc.w	r3, r9, r3
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800375e:	4629      	mov	r1, r5
 8003760:	024b      	lsls	r3, r1, #9
 8003762:	4621      	mov	r1, r4
 8003764:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003768:	4621      	mov	r1, r4
 800376a:	024a      	lsls	r2, r1, #9
 800376c:	4610      	mov	r0, r2
 800376e:	4619      	mov	r1, r3
 8003770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003772:	2200      	movs	r2, #0
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
 8003776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003778:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800377c:	f7fd f94a 	bl	8000a14 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4613      	mov	r3, r2
 8003786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003788:	e058      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378a:	4b38      	ldr	r3, [pc, #224]	; (800386c <HAL_RCC_GetSysClockFreq+0x200>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	099b      	lsrs	r3, r3, #6
 8003790:	2200      	movs	r2, #0
 8003792:	4618      	mov	r0, r3
 8003794:	4611      	mov	r1, r2
 8003796:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800379a:	623b      	str	r3, [r7, #32]
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
 80037a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037a4:	4642      	mov	r2, r8
 80037a6:	464b      	mov	r3, r9
 80037a8:	f04f 0000 	mov.w	r0, #0
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	0159      	lsls	r1, r3, #5
 80037b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b6:	0150      	lsls	r0, r2, #5
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4641      	mov	r1, r8
 80037be:	ebb2 0a01 	subs.w	sl, r2, r1
 80037c2:	4649      	mov	r1, r9
 80037c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037dc:	ebb2 040a 	subs.w	r4, r2, sl
 80037e0:	eb63 050b 	sbc.w	r5, r3, fp
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	00eb      	lsls	r3, r5, #3
 80037ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f2:	00e2      	lsls	r2, r4, #3
 80037f4:	4614      	mov	r4, r2
 80037f6:	461d      	mov	r5, r3
 80037f8:	4643      	mov	r3, r8
 80037fa:	18e3      	adds	r3, r4, r3
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	464b      	mov	r3, r9
 8003800:	eb45 0303 	adc.w	r3, r5, r3
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003812:	4629      	mov	r1, r5
 8003814:	028b      	lsls	r3, r1, #10
 8003816:	4621      	mov	r1, r4
 8003818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800381c:	4621      	mov	r1, r4
 800381e:	028a      	lsls	r2, r1, #10
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003826:	2200      	movs	r2, #0
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	61fa      	str	r2, [r7, #28]
 800382c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003830:	f7fd f8f0 	bl	8000a14 <__aeabi_uldivmod>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4613      	mov	r3, r2
 800383a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_GetSysClockFreq+0x200>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	0c1b      	lsrs	r3, r3, #16
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	3301      	adds	r3, #1
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800384c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800384e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003856:	e002      	b.n	800385e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetSysClockFreq+0x204>)
 800385a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800385c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003860:	4618      	mov	r0, r3
 8003862:	3750      	adds	r7, #80	; 0x50
 8003864:	46bd      	mov	sp, r7
 8003866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	00f42400 	.word	0x00f42400
 8003874:	007a1200 	.word	0x007a1200

08003878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_RCC_GetHCLKFreq+0x14>)
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000000 	.word	0x20000000

08003890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003894:	f7ff fff0 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0a9b      	lsrs	r3, r3, #10
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	08004e30 	.word	0x08004e30

080038b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038bc:	f7ff ffdc 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	0b5b      	lsrs	r3, r3, #13
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4903      	ldr	r1, [pc, #12]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08004e30 	.word	0x08004e30

080038e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e041      	b.n	8003976 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd fe04 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f000 f9a8 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d001      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e044      	b.n	8003a22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1e      	ldr	r2, [pc, #120]	; (8003a30 <HAL_TIM_Base_Start_IT+0xb0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d018      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x6c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c2:	d013      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x6c>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <HAL_TIM_Base_Start_IT+0xb4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00e      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x6c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <HAL_TIM_Base_Start_IT+0xb8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x6c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <HAL_TIM_Base_Start_IT+0xbc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x6c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <HAL_TIM_Base_Start_IT+0xc0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d111      	bne.n	8003a10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d010      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0e:	e007      	b.n	8003a20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40014000 	.word	0x40014000

08003a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d020      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01b      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0202 	mvn.w	r2, #2
 8003a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8d2 	bl	8003c38 <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8c4 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8d5 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d020      	beq.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01b      	beq.n	8003af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0204 	mvn.w	r2, #4
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f8ac 	bl	8003c38 <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f89e 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f8af 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d020      	beq.n	8003b40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01b      	beq.n	8003b40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0208 	mvn.w	r2, #8
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2204      	movs	r2, #4
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f886 	bl	8003c38 <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f878 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f889 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d020      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01b      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0210 	mvn.w	r2, #16
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2208      	movs	r2, #8
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f860 	bl	8003c38 <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f852 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f863 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0201 	mvn.w	r2, #1
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd fbbc 	bl	8001328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8e6 	bl	8003da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00c      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f834 	bl	8003c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0220 	mvn.w	r2, #32
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f8b8 	bl	8003d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3a      	ldr	r2, [pc, #232]	; (8003d70 <TIM_Base_SetConfig+0xfc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00f      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d00b      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a37      	ldr	r2, [pc, #220]	; (8003d74 <TIM_Base_SetConfig+0x100>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a36      	ldr	r2, [pc, #216]	; (8003d78 <TIM_Base_SetConfig+0x104>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a35      	ldr	r2, [pc, #212]	; (8003d7c <TIM_Base_SetConfig+0x108>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d108      	bne.n	8003cbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	; (8003d70 <TIM_Base_SetConfig+0xfc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01b      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ccc:	d017      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a28      	ldr	r2, [pc, #160]	; (8003d74 <TIM_Base_SetConfig+0x100>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <TIM_Base_SetConfig+0x104>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00f      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a26      	ldr	r2, [pc, #152]	; (8003d7c <TIM_Base_SetConfig+0x108>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <TIM_Base_SetConfig+0x10c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <TIM_Base_SetConfig+0x110>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a23      	ldr	r2, [pc, #140]	; (8003d88 <TIM_Base_SetConfig+0x114>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d108      	bne.n	8003d10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a0e      	ldr	r2, [pc, #56]	; (8003d70 <TIM_Base_SetConfig+0xfc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d103      	bne.n	8003d44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d105      	bne.n	8003d62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	611a      	str	r2, [r3, #16]
  }
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800

08003d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e042      	b.n	8003e4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd fbc2 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2224      	movs	r2, #36	; 0x24
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f82b 	bl	8003e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e58:	b0c0      	sub	sp, #256	; 0x100
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e70:	68d9      	ldr	r1, [r3, #12]
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	ea40 0301 	orr.w	r3, r0, r1
 8003e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eac:	f021 010c 	bic.w	r1, r1, #12
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ece:	6999      	ldr	r1, [r3, #24]
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	ea40 0301 	orr.w	r3, r0, r1
 8003eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b8f      	ldr	r3, [pc, #572]	; (8004120 <UART_SetConfig+0x2cc>)
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d005      	beq.n	8003ef4 <UART_SetConfig+0xa0>
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <UART_SetConfig+0x2d0>)
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d104      	bne.n	8003efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7ff fce0 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8003ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003efc:	e003      	b.n	8003f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003efe:	f7ff fcc7 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8003f02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f10:	f040 810c 	bne.w	800412c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f26:	4622      	mov	r2, r4
 8003f28:	462b      	mov	r3, r5
 8003f2a:	1891      	adds	r1, r2, r2
 8003f2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f2e:	415b      	adcs	r3, r3
 8003f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f36:	4621      	mov	r1, r4
 8003f38:	eb12 0801 	adds.w	r8, r2, r1
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	eb43 0901 	adc.w	r9, r3, r1
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f56:	4690      	mov	r8, r2
 8003f58:	4699      	mov	r9, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	eb18 0303 	adds.w	r3, r8, r3
 8003f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f64:	462b      	mov	r3, r5
 8003f66:	eb49 0303 	adc.w	r3, r9, r3
 8003f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f82:	460b      	mov	r3, r1
 8003f84:	18db      	adds	r3, r3, r3
 8003f86:	653b      	str	r3, [r7, #80]	; 0x50
 8003f88:	4613      	mov	r3, r2
 8003f8a:	eb42 0303 	adc.w	r3, r2, r3
 8003f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f98:	f7fc fd3c 	bl	8000a14 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4b61      	ldr	r3, [pc, #388]	; (8004128 <UART_SetConfig+0x2d4>)
 8003fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	011c      	lsls	r4, r3, #4
 8003faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	1891      	adds	r1, r2, r2
 8003fc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fc4:	415b      	adcs	r3, r3
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fcc:	4641      	mov	r1, r8
 8003fce:	eb12 0a01 	adds.w	sl, r2, r1
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	eb43 0b01 	adc.w	fp, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fec:	4692      	mov	sl, r2
 8003fee:	469b      	mov	fp, r3
 8003ff0:	4643      	mov	r3, r8
 8003ff2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8004000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004010:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004018:	460b      	mov	r3, r1
 800401a:	18db      	adds	r3, r3, r3
 800401c:	643b      	str	r3, [r7, #64]	; 0x40
 800401e:	4613      	mov	r3, r2
 8004020:	eb42 0303 	adc.w	r3, r2, r3
 8004024:	647b      	str	r3, [r7, #68]	; 0x44
 8004026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800402a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800402e:	f7fc fcf1 	bl	8000a14 <__aeabi_uldivmod>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4611      	mov	r1, r2
 8004038:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <UART_SetConfig+0x2d4>)
 800403a:	fba3 2301 	umull	r2, r3, r3, r1
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2264      	movs	r2, #100	; 0x64
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	1acb      	subs	r3, r1, r3
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800404e:	4b36      	ldr	r3, [pc, #216]	; (8004128 <UART_SetConfig+0x2d4>)
 8004050:	fba3 2302 	umull	r2, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800405c:	441c      	add	r4, r3
 800405e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004068:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800406c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	1891      	adds	r1, r2, r2
 8004076:	63b9      	str	r1, [r7, #56]	; 0x38
 8004078:	415b      	adcs	r3, r3
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004080:	4641      	mov	r1, r8
 8004082:	1851      	adds	r1, r2, r1
 8004084:	6339      	str	r1, [r7, #48]	; 0x30
 8004086:	4649      	mov	r1, r9
 8004088:	414b      	adcs	r3, r1
 800408a:	637b      	str	r3, [r7, #52]	; 0x34
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004098:	4659      	mov	r1, fp
 800409a:	00cb      	lsls	r3, r1, #3
 800409c:	4651      	mov	r1, sl
 800409e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a2:	4651      	mov	r1, sl
 80040a4:	00ca      	lsls	r2, r1, #3
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	4642      	mov	r2, r8
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040b4:	464b      	mov	r3, r9
 80040b6:	460a      	mov	r2, r1
 80040b8:	eb42 0303 	adc.w	r3, r2, r3
 80040bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040d4:	460b      	mov	r3, r1
 80040d6:	18db      	adds	r3, r3, r3
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040da:	4613      	mov	r3, r2
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040ea:	f7fc fc93 	bl	8000a14 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <UART_SetConfig+0x2d4>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	; 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	3332      	adds	r3, #50	; 0x32
 8004106:	4a08      	ldr	r2, [pc, #32]	; (8004128 <UART_SetConfig+0x2d4>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 0207 	and.w	r2, r3, #7
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4422      	add	r2, r4
 800411a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800411c:	e106      	b.n	800432c <UART_SetConfig+0x4d8>
 800411e:	bf00      	nop
 8004120:	40011000 	.word	0x40011000
 8004124:	40011400 	.word	0x40011400
 8004128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800412c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004130:	2200      	movs	r2, #0
 8004132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004136:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800413a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800413e:	4642      	mov	r2, r8
 8004140:	464b      	mov	r3, r9
 8004142:	1891      	adds	r1, r2, r2
 8004144:	6239      	str	r1, [r7, #32]
 8004146:	415b      	adcs	r3, r3
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
 800414a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800414e:	4641      	mov	r1, r8
 8004150:	1854      	adds	r4, r2, r1
 8004152:	4649      	mov	r1, r9
 8004154:	eb43 0501 	adc.w	r5, r3, r1
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	00eb      	lsls	r3, r5, #3
 8004162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004166:	00e2      	lsls	r2, r4, #3
 8004168:	4614      	mov	r4, r2
 800416a:	461d      	mov	r5, r3
 800416c:	4643      	mov	r3, r8
 800416e:	18e3      	adds	r3, r4, r3
 8004170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004174:	464b      	mov	r3, r9
 8004176:	eb45 0303 	adc.w	r3, r5, r3
 800417a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800418a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800419a:	4629      	mov	r1, r5
 800419c:	008b      	lsls	r3, r1, #2
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a4:	4621      	mov	r1, r4
 80041a6:	008a      	lsls	r2, r1, #2
 80041a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041ac:	f7fc fc32 	bl	8000a14 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4b60      	ldr	r3, [pc, #384]	; (8004338 <UART_SetConfig+0x4e4>)
 80041b6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	011c      	lsls	r4, r3, #4
 80041be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	61b9      	str	r1, [r7, #24]
 80041d8:	415b      	adcs	r3, r3
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e0:	4641      	mov	r1, r8
 80041e2:	1851      	adds	r1, r2, r1
 80041e4:	6139      	str	r1, [r7, #16]
 80041e6:	4649      	mov	r1, r9
 80041e8:	414b      	adcs	r3, r1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f8:	4659      	mov	r1, fp
 80041fa:	00cb      	lsls	r3, r1, #3
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004202:	4651      	mov	r1, sl
 8004204:	00ca      	lsls	r2, r1, #3
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	4603      	mov	r3, r0
 800420c:	4642      	mov	r2, r8
 800420e:	189b      	adds	r3, r3, r2
 8004210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004214:	464b      	mov	r3, r9
 8004216:	460a      	mov	r2, r1
 8004218:	eb42 0303 	adc.w	r3, r2, r3
 800421c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	67bb      	str	r3, [r7, #120]	; 0x78
 800422a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004238:	4649      	mov	r1, r9
 800423a:	008b      	lsls	r3, r1, #2
 800423c:	4641      	mov	r1, r8
 800423e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004242:	4641      	mov	r1, r8
 8004244:	008a      	lsls	r2, r1, #2
 8004246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800424a:	f7fc fbe3 	bl	8000a14 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4611      	mov	r1, r2
 8004254:	4b38      	ldr	r3, [pc, #224]	; (8004338 <UART_SetConfig+0x4e4>)
 8004256:	fba3 2301 	umull	r2, r3, r3, r1
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2264      	movs	r2, #100	; 0x64
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	1acb      	subs	r3, r1, r3
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	3332      	adds	r3, #50	; 0x32
 8004268:	4a33      	ldr	r2, [pc, #204]	; (8004338 <UART_SetConfig+0x4e4>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004274:	441c      	add	r4, r3
 8004276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800427a:	2200      	movs	r2, #0
 800427c:	673b      	str	r3, [r7, #112]	; 0x70
 800427e:	677a      	str	r2, [r7, #116]	; 0x74
 8004280:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	1891      	adds	r1, r2, r2
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	415b      	adcs	r3, r3
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004294:	4641      	mov	r1, r8
 8004296:	1851      	adds	r1, r2, r1
 8004298:	6039      	str	r1, [r7, #0]
 800429a:	4649      	mov	r1, r9
 800429c:	414b      	adcs	r3, r1
 800429e:	607b      	str	r3, [r7, #4]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042ac:	4659      	mov	r1, fp
 80042ae:	00cb      	lsls	r3, r1, #3
 80042b0:	4651      	mov	r1, sl
 80042b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042b6:	4651      	mov	r1, sl
 80042b8:	00ca      	lsls	r2, r1, #3
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	4642      	mov	r2, r8
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042c6:	464b      	mov	r3, r9
 80042c8:	460a      	mov	r2, r1
 80042ca:	eb42 0303 	adc.w	r3, r2, r3
 80042ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	663b      	str	r3, [r7, #96]	; 0x60
 80042da:	667a      	str	r2, [r7, #100]	; 0x64
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042e8:	4649      	mov	r1, r9
 80042ea:	008b      	lsls	r3, r1, #2
 80042ec:	4641      	mov	r1, r8
 80042ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f2:	4641      	mov	r1, r8
 80042f4:	008a      	lsls	r2, r1, #2
 80042f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042fa:	f7fc fb8b 	bl	8000a14 <__aeabi_uldivmod>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <UART_SetConfig+0x4e4>)
 8004304:	fba3 1302 	umull	r1, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	2164      	movs	r1, #100	; 0x64
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	3332      	adds	r3, #50	; 0x32
 8004316:	4a08      	ldr	r2, [pc, #32]	; (8004338 <UART_SetConfig+0x4e4>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4422      	add	r2, r4
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004332:	46bd      	mov	sp, r7
 8004334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004338:	51eb851f 	.word	0x51eb851f

0800433c <memset>:
 800433c:	4402      	add	r2, r0
 800433e:	4603      	mov	r3, r0
 8004340:	4293      	cmp	r3, r2
 8004342:	d100      	bne.n	8004346 <memset+0xa>
 8004344:	4770      	bx	lr
 8004346:	f803 1b01 	strb.w	r1, [r3], #1
 800434a:	e7f9      	b.n	8004340 <memset+0x4>

0800434c <__libc_init_array>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	4d0d      	ldr	r5, [pc, #52]	; (8004384 <__libc_init_array+0x38>)
 8004350:	4c0d      	ldr	r4, [pc, #52]	; (8004388 <__libc_init_array+0x3c>)
 8004352:	1b64      	subs	r4, r4, r5
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	2600      	movs	r6, #0
 8004358:	42a6      	cmp	r6, r4
 800435a:	d109      	bne.n	8004370 <__libc_init_array+0x24>
 800435c:	4d0b      	ldr	r5, [pc, #44]	; (800438c <__libc_init_array+0x40>)
 800435e:	4c0c      	ldr	r4, [pc, #48]	; (8004390 <__libc_init_array+0x44>)
 8004360:	f000 fd52 	bl	8004e08 <_init>
 8004364:	1b64      	subs	r4, r4, r5
 8004366:	10a4      	asrs	r4, r4, #2
 8004368:	2600      	movs	r6, #0
 800436a:	42a6      	cmp	r6, r4
 800436c:	d105      	bne.n	800437a <__libc_init_array+0x2e>
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	f855 3b04 	ldr.w	r3, [r5], #4
 8004374:	4798      	blx	r3
 8004376:	3601      	adds	r6, #1
 8004378:	e7ee      	b.n	8004358 <__libc_init_array+0xc>
 800437a:	f855 3b04 	ldr.w	r3, [r5], #4
 800437e:	4798      	blx	r3
 8004380:	3601      	adds	r6, #1
 8004382:	e7f2      	b.n	800436a <__libc_init_array+0x1e>
 8004384:	08005210 	.word	0x08005210
 8004388:	08005210 	.word	0x08005210
 800438c:	08005210 	.word	0x08005210
 8004390:	08005214 	.word	0x08005214

08004394 <sinf>:
 8004394:	ee10 3a10 	vmov	r3, s0
 8004398:	b507      	push	{r0, r1, r2, lr}
 800439a:	4a1f      	ldr	r2, [pc, #124]	; (8004418 <sinf+0x84>)
 800439c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043a0:	4293      	cmp	r3, r2
 80043a2:	dc07      	bgt.n	80043b4 <sinf+0x20>
 80043a4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800441c <sinf+0x88>
 80043a8:	2000      	movs	r0, #0
 80043aa:	b003      	add	sp, #12
 80043ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80043b0:	f000 b894 	b.w	80044dc <__kernel_sinf>
 80043b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80043b8:	db04      	blt.n	80043c4 <sinf+0x30>
 80043ba:	ee30 0a40 	vsub.f32	s0, s0, s0
 80043be:	b003      	add	sp, #12
 80043c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80043c4:	4668      	mov	r0, sp
 80043c6:	f000 f8d1 	bl	800456c <__ieee754_rem_pio2f>
 80043ca:	f000 0003 	and.w	r0, r0, #3
 80043ce:	2801      	cmp	r0, #1
 80043d0:	d00a      	beq.n	80043e8 <sinf+0x54>
 80043d2:	2802      	cmp	r0, #2
 80043d4:	d00f      	beq.n	80043f6 <sinf+0x62>
 80043d6:	b9c0      	cbnz	r0, 800440a <sinf+0x76>
 80043d8:	eddd 0a01 	vldr	s1, [sp, #4]
 80043dc:	ed9d 0a00 	vldr	s0, [sp]
 80043e0:	2001      	movs	r0, #1
 80043e2:	f000 f87b 	bl	80044dc <__kernel_sinf>
 80043e6:	e7ea      	b.n	80043be <sinf+0x2a>
 80043e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80043ec:	ed9d 0a00 	vldr	s0, [sp]
 80043f0:	f000 f816 	bl	8004420 <__kernel_cosf>
 80043f4:	e7e3      	b.n	80043be <sinf+0x2a>
 80043f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80043fa:	ed9d 0a00 	vldr	s0, [sp]
 80043fe:	2001      	movs	r0, #1
 8004400:	f000 f86c 	bl	80044dc <__kernel_sinf>
 8004404:	eeb1 0a40 	vneg.f32	s0, s0
 8004408:	e7d9      	b.n	80043be <sinf+0x2a>
 800440a:	eddd 0a01 	vldr	s1, [sp, #4]
 800440e:	ed9d 0a00 	vldr	s0, [sp]
 8004412:	f000 f805 	bl	8004420 <__kernel_cosf>
 8004416:	e7f5      	b.n	8004404 <sinf+0x70>
 8004418:	3f490fd8 	.word	0x3f490fd8
 800441c:	00000000 	.word	0x00000000

08004420 <__kernel_cosf>:
 8004420:	ee10 3a10 	vmov	r3, s0
 8004424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004428:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800442c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004430:	da05      	bge.n	800443e <__kernel_cosf+0x1e>
 8004432:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004436:	ee17 2a90 	vmov	r2, s15
 800443a:	2a00      	cmp	r2, #0
 800443c:	d03b      	beq.n	80044b6 <__kernel_cosf+0x96>
 800443e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004442:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80044bc <__kernel_cosf+0x9c>
 8004446:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80044c0 <__kernel_cosf+0xa0>
 800444a:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <__kernel_cosf+0xa4>)
 800444c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004450:	4293      	cmp	r3, r2
 8004452:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80044c8 <__kernel_cosf+0xa8>
 8004456:	eee6 7a07 	vfma.f32	s15, s12, s14
 800445a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80044cc <__kernel_cosf+0xac>
 800445e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004462:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80044d0 <__kernel_cosf+0xb0>
 8004466:	eee6 7a07 	vfma.f32	s15, s12, s14
 800446a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80044d4 <__kernel_cosf+0xb4>
 800446e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004472:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8004476:	ee26 6a07 	vmul.f32	s12, s12, s14
 800447a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800447e:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004486:	dc04      	bgt.n	8004492 <__kernel_cosf+0x72>
 8004488:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800448c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8004490:	4770      	bx	lr
 8004492:	4a11      	ldr	r2, [pc, #68]	; (80044d8 <__kernel_cosf+0xb8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	bfda      	itte	le
 8004498:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800449c:	ee07 3a10 	vmovle	s14, r3
 80044a0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80044a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044a8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80044ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80044b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80044b4:	4770      	bx	lr
 80044b6:	eeb0 0a66 	vmov.f32	s0, s13
 80044ba:	4770      	bx	lr
 80044bc:	ad47d74e 	.word	0xad47d74e
 80044c0:	310f74f6 	.word	0x310f74f6
 80044c4:	3e999999 	.word	0x3e999999
 80044c8:	b493f27c 	.word	0xb493f27c
 80044cc:	37d00d01 	.word	0x37d00d01
 80044d0:	bab60b61 	.word	0xbab60b61
 80044d4:	3d2aaaab 	.word	0x3d2aaaab
 80044d8:	3f480000 	.word	0x3f480000

080044dc <__kernel_sinf>:
 80044dc:	ee10 3a10 	vmov	r3, s0
 80044e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80044e8:	da04      	bge.n	80044f4 <__kernel_sinf+0x18>
 80044ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80044ee:	ee17 3a90 	vmov	r3, s15
 80044f2:	b35b      	cbz	r3, 800454c <__kernel_sinf+0x70>
 80044f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80044f8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004550 <__kernel_sinf+0x74>
 80044fc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004554 <__kernel_sinf+0x78>
 8004500:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004504:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004558 <__kernel_sinf+0x7c>
 8004508:	eee6 7a07 	vfma.f32	s15, s12, s14
 800450c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800455c <__kernel_sinf+0x80>
 8004510:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004514:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004560 <__kernel_sinf+0x84>
 8004518:	ee60 6a07 	vmul.f32	s13, s0, s14
 800451c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004520:	b930      	cbnz	r0, 8004530 <__kernel_sinf+0x54>
 8004522:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004564 <__kernel_sinf+0x88>
 8004526:	eea7 6a27 	vfma.f32	s12, s14, s15
 800452a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800452e:	4770      	bx	lr
 8004530:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004534:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004538:	eee0 7a86 	vfma.f32	s15, s1, s12
 800453c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004540:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004568 <__kernel_sinf+0x8c>
 8004544:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004548:	ee30 0a60 	vsub.f32	s0, s0, s1
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	2f2ec9d3 	.word	0x2f2ec9d3
 8004554:	b2d72f34 	.word	0xb2d72f34
 8004558:	3638ef1b 	.word	0x3638ef1b
 800455c:	b9500d01 	.word	0xb9500d01
 8004560:	3c088889 	.word	0x3c088889
 8004564:	be2aaaab 	.word	0xbe2aaaab
 8004568:	3e2aaaab 	.word	0x3e2aaaab

0800456c <__ieee754_rem_pio2f>:
 800456c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456e:	ee10 6a10 	vmov	r6, s0
 8004572:	4b86      	ldr	r3, [pc, #536]	; (800478c <__ieee754_rem_pio2f+0x220>)
 8004574:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004578:	429d      	cmp	r5, r3
 800457a:	b087      	sub	sp, #28
 800457c:	4604      	mov	r4, r0
 800457e:	dc05      	bgt.n	800458c <__ieee754_rem_pio2f+0x20>
 8004580:	2300      	movs	r3, #0
 8004582:	ed80 0a00 	vstr	s0, [r0]
 8004586:	6043      	str	r3, [r0, #4]
 8004588:	2000      	movs	r0, #0
 800458a:	e020      	b.n	80045ce <__ieee754_rem_pio2f+0x62>
 800458c:	4b80      	ldr	r3, [pc, #512]	; (8004790 <__ieee754_rem_pio2f+0x224>)
 800458e:	429d      	cmp	r5, r3
 8004590:	dc38      	bgt.n	8004604 <__ieee754_rem_pio2f+0x98>
 8004592:	2e00      	cmp	r6, #0
 8004594:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8004794 <__ieee754_rem_pio2f+0x228>
 8004598:	4b7f      	ldr	r3, [pc, #508]	; (8004798 <__ieee754_rem_pio2f+0x22c>)
 800459a:	f025 050f 	bic.w	r5, r5, #15
 800459e:	dd18      	ble.n	80045d2 <__ieee754_rem_pio2f+0x66>
 80045a0:	429d      	cmp	r5, r3
 80045a2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80045a6:	bf09      	itett	eq
 80045a8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800479c <__ieee754_rem_pio2f+0x230>
 80045ac:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80047a0 <__ieee754_rem_pio2f+0x234>
 80045b0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80045b4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80047a4 <__ieee754_rem_pio2f+0x238>
 80045b8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80045bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80045c0:	edc0 6a00 	vstr	s13, [r0]
 80045c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80045cc:	2001      	movs	r0, #1
 80045ce:	b007      	add	sp, #28
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d2:	429d      	cmp	r5, r3
 80045d4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80045d8:	bf09      	itett	eq
 80045da:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800479c <__ieee754_rem_pio2f+0x230>
 80045de:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80047a0 <__ieee754_rem_pio2f+0x234>
 80045e2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80045e6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80047a4 <__ieee754_rem_pio2f+0x238>
 80045ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80045ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80045f2:	edc0 6a00 	vstr	s13, [r0]
 80045f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045fa:	edc0 7a01 	vstr	s15, [r0, #4]
 80045fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004602:	e7e4      	b.n	80045ce <__ieee754_rem_pio2f+0x62>
 8004604:	4b68      	ldr	r3, [pc, #416]	; (80047a8 <__ieee754_rem_pio2f+0x23c>)
 8004606:	429d      	cmp	r5, r3
 8004608:	dc71      	bgt.n	80046ee <__ieee754_rem_pio2f+0x182>
 800460a:	f000 f8db 	bl	80047c4 <fabsf>
 800460e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80047ac <__ieee754_rem_pio2f+0x240>
 8004612:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004616:	eee0 7a07 	vfma.f32	s15, s0, s14
 800461a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800461e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004622:	ee17 0a90 	vmov	r0, s15
 8004626:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004794 <__ieee754_rem_pio2f+0x228>
 800462a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800462e:	281f      	cmp	r0, #31
 8004630:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80047a0 <__ieee754_rem_pio2f+0x234>
 8004634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004638:	eeb1 6a47 	vneg.f32	s12, s14
 800463c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004640:	ee16 2a90 	vmov	r2, s13
 8004644:	dc1c      	bgt.n	8004680 <__ieee754_rem_pio2f+0x114>
 8004646:	495a      	ldr	r1, [pc, #360]	; (80047b0 <__ieee754_rem_pio2f+0x244>)
 8004648:	1e47      	subs	r7, r0, #1
 800464a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800464e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004652:	428b      	cmp	r3, r1
 8004654:	d014      	beq.n	8004680 <__ieee754_rem_pio2f+0x114>
 8004656:	6022      	str	r2, [r4, #0]
 8004658:	ed94 7a00 	vldr	s14, [r4]
 800465c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004660:	2e00      	cmp	r6, #0
 8004662:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004666:	ed84 0a01 	vstr	s0, [r4, #4]
 800466a:	dab0      	bge.n	80045ce <__ieee754_rem_pio2f+0x62>
 800466c:	eeb1 7a47 	vneg.f32	s14, s14
 8004670:	eeb1 0a40 	vneg.f32	s0, s0
 8004674:	ed84 7a00 	vstr	s14, [r4]
 8004678:	ed84 0a01 	vstr	s0, [r4, #4]
 800467c:	4240      	negs	r0, r0
 800467e:	e7a6      	b.n	80045ce <__ieee754_rem_pio2f+0x62>
 8004680:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004684:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8004688:	2908      	cmp	r1, #8
 800468a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800468e:	dde2      	ble.n	8004656 <__ieee754_rem_pio2f+0xea>
 8004690:	eddf 5a42 	vldr	s11, [pc, #264]	; 800479c <__ieee754_rem_pio2f+0x230>
 8004694:	eef0 6a40 	vmov.f32	s13, s0
 8004698:	eee6 6a25 	vfma.f32	s13, s12, s11
 800469c:	ee70 7a66 	vsub.f32	s15, s0, s13
 80046a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80046a4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80047a4 <__ieee754_rem_pio2f+0x238>
 80046a8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80046ac:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80046b0:	ee15 2a90 	vmov	r2, s11
 80046b4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80046b8:	1a5b      	subs	r3, r3, r1
 80046ba:	2b19      	cmp	r3, #25
 80046bc:	dc04      	bgt.n	80046c8 <__ieee754_rem_pio2f+0x15c>
 80046be:	edc4 5a00 	vstr	s11, [r4]
 80046c2:	eeb0 0a66 	vmov.f32	s0, s13
 80046c6:	e7c7      	b.n	8004658 <__ieee754_rem_pio2f+0xec>
 80046c8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80047b4 <__ieee754_rem_pio2f+0x248>
 80046cc:	eeb0 0a66 	vmov.f32	s0, s13
 80046d0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80046d4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80046d8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80047b8 <__ieee754_rem_pio2f+0x24c>
 80046dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80046e0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80046e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80046e8:	ed84 7a00 	vstr	s14, [r4]
 80046ec:	e7b4      	b.n	8004658 <__ieee754_rem_pio2f+0xec>
 80046ee:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80046f2:	db06      	blt.n	8004702 <__ieee754_rem_pio2f+0x196>
 80046f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80046f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80046fc:	edc0 7a00 	vstr	s15, [r0]
 8004700:	e742      	b.n	8004588 <__ieee754_rem_pio2f+0x1c>
 8004702:	15ea      	asrs	r2, r5, #23
 8004704:	3a86      	subs	r2, #134	; 0x86
 8004706:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004712:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80047bc <__ieee754_rem_pio2f+0x250>
 8004716:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800471a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800471e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004722:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004726:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800472a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800472e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004732:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004736:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800473a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004742:	edcd 7a05 	vstr	s15, [sp, #20]
 8004746:	d11e      	bne.n	8004786 <__ieee754_rem_pio2f+0x21a>
 8004748:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004750:	bf14      	ite	ne
 8004752:	2302      	movne	r3, #2
 8004754:	2301      	moveq	r3, #1
 8004756:	491a      	ldr	r1, [pc, #104]	; (80047c0 <__ieee754_rem_pio2f+0x254>)
 8004758:	9101      	str	r1, [sp, #4]
 800475a:	2102      	movs	r1, #2
 800475c:	9100      	str	r1, [sp, #0]
 800475e:	a803      	add	r0, sp, #12
 8004760:	4621      	mov	r1, r4
 8004762:	f000 f837 	bl	80047d4 <__kernel_rem_pio2f>
 8004766:	2e00      	cmp	r6, #0
 8004768:	f6bf af31 	bge.w	80045ce <__ieee754_rem_pio2f+0x62>
 800476c:	edd4 7a00 	vldr	s15, [r4]
 8004770:	eef1 7a67 	vneg.f32	s15, s15
 8004774:	edc4 7a00 	vstr	s15, [r4]
 8004778:	edd4 7a01 	vldr	s15, [r4, #4]
 800477c:	eef1 7a67 	vneg.f32	s15, s15
 8004780:	edc4 7a01 	vstr	s15, [r4, #4]
 8004784:	e77a      	b.n	800467c <__ieee754_rem_pio2f+0x110>
 8004786:	2303      	movs	r3, #3
 8004788:	e7e5      	b.n	8004756 <__ieee754_rem_pio2f+0x1ea>
 800478a:	bf00      	nop
 800478c:	3f490fd8 	.word	0x3f490fd8
 8004790:	4016cbe3 	.word	0x4016cbe3
 8004794:	3fc90f80 	.word	0x3fc90f80
 8004798:	3fc90fd0 	.word	0x3fc90fd0
 800479c:	37354400 	.word	0x37354400
 80047a0:	37354443 	.word	0x37354443
 80047a4:	2e85a308 	.word	0x2e85a308
 80047a8:	43490f80 	.word	0x43490f80
 80047ac:	3f22f984 	.word	0x3f22f984
 80047b0:	08004e38 	.word	0x08004e38
 80047b4:	2e85a300 	.word	0x2e85a300
 80047b8:	248d3132 	.word	0x248d3132
 80047bc:	43800000 	.word	0x43800000
 80047c0:	08004eb8 	.word	0x08004eb8

080047c4 <fabsf>:
 80047c4:	ee10 3a10 	vmov	r3, s0
 80047c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047cc:	ee00 3a10 	vmov	s0, r3
 80047d0:	4770      	bx	lr
	...

080047d4 <__kernel_rem_pio2f>:
 80047d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d8:	ed2d 8b04 	vpush	{d8-d9}
 80047dc:	b0d9      	sub	sp, #356	; 0x164
 80047de:	4688      	mov	r8, r1
 80047e0:	9002      	str	r0, [sp, #8]
 80047e2:	49b8      	ldr	r1, [pc, #736]	; (8004ac4 <__kernel_rem_pio2f+0x2f0>)
 80047e4:	9866      	ldr	r0, [sp, #408]	; 0x198
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80047ec:	9901      	ldr	r1, [sp, #4]
 80047ee:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 80047f0:	f101 3bff 	add.w	fp, r1, #4294967295
 80047f4:	1d11      	adds	r1, r2, #4
 80047f6:	db25      	blt.n	8004844 <__kernel_rem_pio2f+0x70>
 80047f8:	1ed0      	subs	r0, r2, #3
 80047fa:	bf48      	it	mi
 80047fc:	1d10      	addmi	r0, r2, #4
 80047fe:	10c0      	asrs	r0, r0, #3
 8004800:	1c45      	adds	r5, r0, #1
 8004802:	00e9      	lsls	r1, r5, #3
 8004804:	eba0 070b 	sub.w	r7, r0, fp
 8004808:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8004ad4 <__kernel_rem_pio2f+0x300>
 800480c:	9103      	str	r1, [sp, #12]
 800480e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8004812:	eb0a 0c0b 	add.w	ip, sl, fp
 8004816:	ae1c      	add	r6, sp, #112	; 0x70
 8004818:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800481c:	2400      	movs	r4, #0
 800481e:	4564      	cmp	r4, ip
 8004820:	dd12      	ble.n	8004848 <__kernel_rem_pio2f+0x74>
 8004822:	9901      	ldr	r1, [sp, #4]
 8004824:	ac1c      	add	r4, sp, #112	; 0x70
 8004826:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800482a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800482e:	f04f 0c00 	mov.w	ip, #0
 8004832:	45d4      	cmp	ip, sl
 8004834:	dc27      	bgt.n	8004886 <__kernel_rem_pio2f+0xb2>
 8004836:	f8dd e008 	ldr.w	lr, [sp, #8]
 800483a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8004ad4 <__kernel_rem_pio2f+0x300>
 800483e:	4627      	mov	r7, r4
 8004840:	2600      	movs	r6, #0
 8004842:	e016      	b.n	8004872 <__kernel_rem_pio2f+0x9e>
 8004844:	2000      	movs	r0, #0
 8004846:	e7db      	b.n	8004800 <__kernel_rem_pio2f+0x2c>
 8004848:	42e7      	cmn	r7, r4
 800484a:	bf5d      	ittte	pl
 800484c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8004850:	ee07 1a90 	vmovpl	s15, r1
 8004854:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004858:	eef0 7a47 	vmovmi.f32	s15, s14
 800485c:	ece6 7a01 	vstmia	r6!, {s15}
 8004860:	3401      	adds	r4, #1
 8004862:	e7dc      	b.n	800481e <__kernel_rem_pio2f+0x4a>
 8004864:	ecfe 6a01 	vldmia	lr!, {s13}
 8004868:	ed97 7a00 	vldr	s14, [r7]
 800486c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004870:	3601      	adds	r6, #1
 8004872:	455e      	cmp	r6, fp
 8004874:	f1a7 0704 	sub.w	r7, r7, #4
 8004878:	ddf4      	ble.n	8004864 <__kernel_rem_pio2f+0x90>
 800487a:	ece9 7a01 	vstmia	r9!, {s15}
 800487e:	f10c 0c01 	add.w	ip, ip, #1
 8004882:	3404      	adds	r4, #4
 8004884:	e7d5      	b.n	8004832 <__kernel_rem_pio2f+0x5e>
 8004886:	a908      	add	r1, sp, #32
 8004888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800488c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004890:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8004ad0 <__kernel_rem_pio2f+0x2fc>
 8004894:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8004acc <__kernel_rem_pio2f+0x2f8>
 8004898:	9105      	str	r1, [sp, #20]
 800489a:	9304      	str	r3, [sp, #16]
 800489c:	4656      	mov	r6, sl
 800489e:	00b3      	lsls	r3, r6, #2
 80048a0:	9306      	str	r3, [sp, #24]
 80048a2:	ab58      	add	r3, sp, #352	; 0x160
 80048a4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80048a8:	ac08      	add	r4, sp, #32
 80048aa:	ab44      	add	r3, sp, #272	; 0x110
 80048ac:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80048b0:	46a4      	mov	ip, r4
 80048b2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80048b6:	4637      	mov	r7, r6
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	f1a0 0004 	sub.w	r0, r0, #4
 80048be:	dc4a      	bgt.n	8004956 <__kernel_rem_pio2f+0x182>
 80048c0:	4628      	mov	r0, r5
 80048c2:	9207      	str	r2, [sp, #28]
 80048c4:	f000 f9f8 	bl	8004cb8 <scalbnf>
 80048c8:	eeb0 8a40 	vmov.f32	s16, s0
 80048cc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80048d0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80048d4:	f000 fa56 	bl	8004d84 <floorf>
 80048d8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80048dc:	eea0 8a67 	vfms.f32	s16, s0, s15
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	9a07      	ldr	r2, [sp, #28]
 80048e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80048e8:	ee17 9a90 	vmov	r9, s15
 80048ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80048f4:	dd41      	ble.n	800497a <__kernel_rem_pio2f+0x1a6>
 80048f6:	f106 3cff 	add.w	ip, r6, #4294967295
 80048fa:	ab08      	add	r3, sp, #32
 80048fc:	f1c5 0e08 	rsb	lr, r5, #8
 8004900:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8004904:	fa47 f00e 	asr.w	r0, r7, lr
 8004908:	4481      	add	r9, r0
 800490a:	fa00 f00e 	lsl.w	r0, r0, lr
 800490e:	1a3f      	subs	r7, r7, r0
 8004910:	f1c5 0007 	rsb	r0, r5, #7
 8004914:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8004918:	4107      	asrs	r7, r0
 800491a:	2f00      	cmp	r7, #0
 800491c:	dd3c      	ble.n	8004998 <__kernel_rem_pio2f+0x1c4>
 800491e:	f04f 0e00 	mov.w	lr, #0
 8004922:	f109 0901 	add.w	r9, r9, #1
 8004926:	4671      	mov	r1, lr
 8004928:	4576      	cmp	r6, lr
 800492a:	dc67      	bgt.n	80049fc <__kernel_rem_pio2f+0x228>
 800492c:	2d00      	cmp	r5, #0
 800492e:	dd03      	ble.n	8004938 <__kernel_rem_pio2f+0x164>
 8004930:	2d01      	cmp	r5, #1
 8004932:	d074      	beq.n	8004a1e <__kernel_rem_pio2f+0x24a>
 8004934:	2d02      	cmp	r5, #2
 8004936:	d07b      	beq.n	8004a30 <__kernel_rem_pio2f+0x25c>
 8004938:	2f02      	cmp	r7, #2
 800493a:	d12d      	bne.n	8004998 <__kernel_rem_pio2f+0x1c4>
 800493c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004940:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004944:	b341      	cbz	r1, 8004998 <__kernel_rem_pio2f+0x1c4>
 8004946:	4628      	mov	r0, r5
 8004948:	9207      	str	r2, [sp, #28]
 800494a:	f000 f9b5 	bl	8004cb8 <scalbnf>
 800494e:	9a07      	ldr	r2, [sp, #28]
 8004950:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004954:	e020      	b.n	8004998 <__kernel_rem_pio2f+0x1c4>
 8004956:	ee60 7a28 	vmul.f32	s15, s0, s17
 800495a:	3f01      	subs	r7, #1
 800495c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004964:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004968:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800496c:	ecac 0a01 	vstmia	ip!, {s0}
 8004970:	ed90 0a00 	vldr	s0, [r0]
 8004974:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004978:	e79e      	b.n	80048b8 <__kernel_rem_pio2f+0xe4>
 800497a:	d105      	bne.n	8004988 <__kernel_rem_pio2f+0x1b4>
 800497c:	1e70      	subs	r0, r6, #1
 800497e:	ab08      	add	r3, sp, #32
 8004980:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8004984:	11ff      	asrs	r7, r7, #7
 8004986:	e7c8      	b.n	800491a <__kernel_rem_pio2f+0x146>
 8004988:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800498c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004994:	da30      	bge.n	80049f8 <__kernel_rem_pio2f+0x224>
 8004996:	2700      	movs	r7, #0
 8004998:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800499c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a0:	f040 809a 	bne.w	8004ad8 <__kernel_rem_pio2f+0x304>
 80049a4:	1e74      	subs	r4, r6, #1
 80049a6:	46a4      	mov	ip, r4
 80049a8:	2100      	movs	r1, #0
 80049aa:	45d4      	cmp	ip, sl
 80049ac:	da47      	bge.n	8004a3e <__kernel_rem_pio2f+0x26a>
 80049ae:	2900      	cmp	r1, #0
 80049b0:	d063      	beq.n	8004a7a <__kernel_rem_pio2f+0x2a6>
 80049b2:	ab08      	add	r3, sp, #32
 80049b4:	3d08      	subs	r5, #8
 80049b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d07f      	beq.n	8004abe <__kernel_rem_pio2f+0x2ea>
 80049be:	4628      	mov	r0, r5
 80049c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049c4:	f000 f978 	bl	8004cb8 <scalbnf>
 80049c8:	1c63      	adds	r3, r4, #1
 80049ca:	aa44      	add	r2, sp, #272	; 0x110
 80049cc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004ad0 <__kernel_rem_pio2f+0x2fc>
 80049d0:	0099      	lsls	r1, r3, #2
 80049d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80049d6:	4623      	mov	r3, r4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f280 80ad 	bge.w	8004b38 <__kernel_rem_pio2f+0x364>
 80049de:	4623      	mov	r3, r4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f2c0 80cb 	blt.w	8004b7c <__kernel_rem_pio2f+0x3a8>
 80049e6:	aa44      	add	r2, sp, #272	; 0x110
 80049e8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80049ec:	4e36      	ldr	r6, [pc, #216]	; (8004ac8 <__kernel_rem_pio2f+0x2f4>)
 80049ee:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004ad4 <__kernel_rem_pio2f+0x300>
 80049f2:	2000      	movs	r0, #0
 80049f4:	1ae2      	subs	r2, r4, r3
 80049f6:	e0b6      	b.n	8004b66 <__kernel_rem_pio2f+0x392>
 80049f8:	2702      	movs	r7, #2
 80049fa:	e790      	b.n	800491e <__kernel_rem_pio2f+0x14a>
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	b949      	cbnz	r1, 8004a14 <__kernel_rem_pio2f+0x240>
 8004a00:	b118      	cbz	r0, 8004a0a <__kernel_rem_pio2f+0x236>
 8004a02:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004a06:	6020      	str	r0, [r4, #0]
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f10e 0e01 	add.w	lr, lr, #1
 8004a0e:	3404      	adds	r4, #4
 8004a10:	4601      	mov	r1, r0
 8004a12:	e789      	b.n	8004928 <__kernel_rem_pio2f+0x154>
 8004a14:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004a18:	6020      	str	r0, [r4, #0]
 8004a1a:	4608      	mov	r0, r1
 8004a1c:	e7f5      	b.n	8004a0a <__kernel_rem_pio2f+0x236>
 8004a1e:	1e74      	subs	r4, r6, #1
 8004a20:	ab08      	add	r3, sp, #32
 8004a22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004a26:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004a2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004a2e:	e783      	b.n	8004938 <__kernel_rem_pio2f+0x164>
 8004a30:	1e74      	subs	r4, r6, #1
 8004a32:	ab08      	add	r3, sp, #32
 8004a34:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004a38:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004a3c:	e7f5      	b.n	8004a2a <__kernel_rem_pio2f+0x256>
 8004a3e:	ab08      	add	r3, sp, #32
 8004a40:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8004a44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a48:	4301      	orrs	r1, r0
 8004a4a:	e7ae      	b.n	80049aa <__kernel_rem_pio2f+0x1d6>
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8004a52:	2f00      	cmp	r7, #0
 8004a54:	d0fa      	beq.n	8004a4c <__kernel_rem_pio2f+0x278>
 8004a56:	9b06      	ldr	r3, [sp, #24]
 8004a58:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004a5c:	eb0d 0403 	add.w	r4, sp, r3
 8004a60:	9b01      	ldr	r3, [sp, #4]
 8004a62:	18f7      	adds	r7, r6, r3
 8004a64:	ab1c      	add	r3, sp, #112	; 0x70
 8004a66:	f106 0c01 	add.w	ip, r6, #1
 8004a6a:	3c4c      	subs	r4, #76	; 0x4c
 8004a6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004a70:	4430      	add	r0, r6
 8004a72:	4560      	cmp	r0, ip
 8004a74:	da04      	bge.n	8004a80 <__kernel_rem_pio2f+0x2ac>
 8004a76:	4606      	mov	r6, r0
 8004a78:	e711      	b.n	800489e <__kernel_rem_pio2f+0xca>
 8004a7a:	9c05      	ldr	r4, [sp, #20]
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	e7e6      	b.n	8004a4e <__kernel_rem_pio2f+0x27a>
 8004a80:	9b04      	ldr	r3, [sp, #16]
 8004a82:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004a86:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004a8a:	9306      	str	r3, [sp, #24]
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a94:	2600      	movs	r6, #0
 8004a96:	ece7 7a01 	vstmia	r7!, {s15}
 8004a9a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004ad4 <__kernel_rem_pio2f+0x300>
 8004a9e:	46b9      	mov	r9, r7
 8004aa0:	455e      	cmp	r6, fp
 8004aa2:	dd04      	ble.n	8004aae <__kernel_rem_pio2f+0x2da>
 8004aa4:	ece4 7a01 	vstmia	r4!, {s15}
 8004aa8:	f10c 0c01 	add.w	ip, ip, #1
 8004aac:	e7e1      	b.n	8004a72 <__kernel_rem_pio2f+0x29e>
 8004aae:	ecfe 6a01 	vldmia	lr!, {s13}
 8004ab2:	ed39 7a01 	vldmdb	r9!, {s14}
 8004ab6:	3601      	adds	r6, #1
 8004ab8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004abc:	e7f0      	b.n	8004aa0 <__kernel_rem_pio2f+0x2cc>
 8004abe:	3c01      	subs	r4, #1
 8004ac0:	e777      	b.n	80049b2 <__kernel_rem_pio2f+0x1de>
 8004ac2:	bf00      	nop
 8004ac4:	080051fc 	.word	0x080051fc
 8004ac8:	080051d0 	.word	0x080051d0
 8004acc:	43800000 	.word	0x43800000
 8004ad0:	3b800000 	.word	0x3b800000
 8004ad4:	00000000 	.word	0x00000000
 8004ad8:	9b03      	ldr	r3, [sp, #12]
 8004ada:	eeb0 0a48 	vmov.f32	s0, s16
 8004ade:	1a98      	subs	r0, r3, r2
 8004ae0:	f000 f8ea 	bl	8004cb8 <scalbnf>
 8004ae4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004acc <__kernel_rem_pio2f+0x2f8>
 8004ae8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af0:	db19      	blt.n	8004b26 <__kernel_rem_pio2f+0x352>
 8004af2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004ad0 <__kernel_rem_pio2f+0x2fc>
 8004af6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004afa:	aa08      	add	r2, sp, #32
 8004afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b00:	1c74      	adds	r4, r6, #1
 8004b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b06:	3508      	adds	r5, #8
 8004b08:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b10:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b14:	ee10 3a10 	vmov	r3, s0
 8004b18:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004b1c:	ee17 3a90 	vmov	r3, s15
 8004b20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004b24:	e74b      	b.n	80049be <__kernel_rem_pio2f+0x1ea>
 8004b26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b2a:	aa08      	add	r2, sp, #32
 8004b2c:	ee10 3a10 	vmov	r3, s0
 8004b30:	4634      	mov	r4, r6
 8004b32:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004b36:	e742      	b.n	80049be <__kernel_rem_pio2f+0x1ea>
 8004b38:	a808      	add	r0, sp, #32
 8004b3a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004b3e:	9001      	str	r0, [sp, #4]
 8004b40:	ee07 0a90 	vmov	s15, r0
 8004b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004b4e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004b52:	ed62 7a01 	vstmdb	r2!, {s15}
 8004b56:	e73f      	b.n	80049d8 <__kernel_rem_pio2f+0x204>
 8004b58:	ecf6 6a01 	vldmia	r6!, {s13}
 8004b5c:	ecb5 7a01 	vldmia	r5!, {s14}
 8004b60:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b64:	3001      	adds	r0, #1
 8004b66:	4550      	cmp	r0, sl
 8004b68:	dc01      	bgt.n	8004b6e <__kernel_rem_pio2f+0x39a>
 8004b6a:	4290      	cmp	r0, r2
 8004b6c:	ddf4      	ble.n	8004b58 <__kernel_rem_pio2f+0x384>
 8004b6e:	a858      	add	r0, sp, #352	; 0x160
 8004b70:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b74:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	e731      	b.n	80049e0 <__kernel_rem_pio2f+0x20c>
 8004b7c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	dc09      	bgt.n	8004b96 <__kernel_rem_pio2f+0x3c2>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	dc2b      	bgt.n	8004bde <__kernel_rem_pio2f+0x40a>
 8004b86:	d044      	beq.n	8004c12 <__kernel_rem_pio2f+0x43e>
 8004b88:	f009 0007 	and.w	r0, r9, #7
 8004b8c:	b059      	add	sp, #356	; 0x164
 8004b8e:	ecbd 8b04 	vpop	{d8-d9}
 8004b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b96:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d1f5      	bne.n	8004b88 <__kernel_rem_pio2f+0x3b4>
 8004b9c:	aa30      	add	r2, sp, #192	; 0xc0
 8004b9e:	1f0b      	subs	r3, r1, #4
 8004ba0:	4413      	add	r3, r2
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	f1a2 0204 	sub.w	r2, r2, #4
 8004bac:	dc52      	bgt.n	8004c54 <__kernel_rem_pio2f+0x480>
 8004bae:	4622      	mov	r2, r4
 8004bb0:	2a01      	cmp	r2, #1
 8004bb2:	f1a3 0304 	sub.w	r3, r3, #4
 8004bb6:	dc5d      	bgt.n	8004c74 <__kernel_rem_pio2f+0x4a0>
 8004bb8:	ab30      	add	r3, sp, #192	; 0xc0
 8004bba:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004ad4 <__kernel_rem_pio2f+0x300>
 8004bbe:	440b      	add	r3, r1
 8004bc0:	2c01      	cmp	r4, #1
 8004bc2:	dc67      	bgt.n	8004c94 <__kernel_rem_pio2f+0x4c0>
 8004bc4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8004bc8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8004bcc:	2f00      	cmp	r7, #0
 8004bce:	d167      	bne.n	8004ca0 <__kernel_rem_pio2f+0x4cc>
 8004bd0:	edc8 6a00 	vstr	s13, [r8]
 8004bd4:	ed88 7a01 	vstr	s14, [r8, #4]
 8004bd8:	edc8 7a02 	vstr	s15, [r8, #8]
 8004bdc:	e7d4      	b.n	8004b88 <__kernel_rem_pio2f+0x3b4>
 8004bde:	ab30      	add	r3, sp, #192	; 0xc0
 8004be0:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8004ad4 <__kernel_rem_pio2f+0x300>
 8004be4:	440b      	add	r3, r1
 8004be6:	4622      	mov	r2, r4
 8004be8:	2a00      	cmp	r2, #0
 8004bea:	da24      	bge.n	8004c36 <__kernel_rem_pio2f+0x462>
 8004bec:	b34f      	cbz	r7, 8004c42 <__kernel_rem_pio2f+0x46e>
 8004bee:	eef1 7a47 	vneg.f32	s15, s14
 8004bf2:	edc8 7a00 	vstr	s15, [r8]
 8004bf6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8004bfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bfe:	aa31      	add	r2, sp, #196	; 0xc4
 8004c00:	2301      	movs	r3, #1
 8004c02:	429c      	cmp	r4, r3
 8004c04:	da20      	bge.n	8004c48 <__kernel_rem_pio2f+0x474>
 8004c06:	b10f      	cbz	r7, 8004c0c <__kernel_rem_pio2f+0x438>
 8004c08:	eef1 7a67 	vneg.f32	s15, s15
 8004c0c:	edc8 7a01 	vstr	s15, [r8, #4]
 8004c10:	e7ba      	b.n	8004b88 <__kernel_rem_pio2f+0x3b4>
 8004c12:	ab30      	add	r3, sp, #192	; 0xc0
 8004c14:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8004ad4 <__kernel_rem_pio2f+0x300>
 8004c18:	440b      	add	r3, r1
 8004c1a:	2c00      	cmp	r4, #0
 8004c1c:	da05      	bge.n	8004c2a <__kernel_rem_pio2f+0x456>
 8004c1e:	b10f      	cbz	r7, 8004c24 <__kernel_rem_pio2f+0x450>
 8004c20:	eef1 7a67 	vneg.f32	s15, s15
 8004c24:	edc8 7a00 	vstr	s15, [r8]
 8004c28:	e7ae      	b.n	8004b88 <__kernel_rem_pio2f+0x3b4>
 8004c2a:	ed33 7a01 	vldmdb	r3!, {s14}
 8004c2e:	3c01      	subs	r4, #1
 8004c30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c34:	e7f1      	b.n	8004c1a <__kernel_rem_pio2f+0x446>
 8004c36:	ed73 7a01 	vldmdb	r3!, {s15}
 8004c3a:	3a01      	subs	r2, #1
 8004c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c40:	e7d2      	b.n	8004be8 <__kernel_rem_pio2f+0x414>
 8004c42:	eef0 7a47 	vmov.f32	s15, s14
 8004c46:	e7d4      	b.n	8004bf2 <__kernel_rem_pio2f+0x41e>
 8004c48:	ecb2 7a01 	vldmia	r2!, {s14}
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c52:	e7d6      	b.n	8004c02 <__kernel_rem_pio2f+0x42e>
 8004c54:	edd2 7a00 	vldr	s15, [r2]
 8004c58:	edd2 6a01 	vldr	s13, [r2, #4]
 8004c5c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c60:	3801      	subs	r0, #1
 8004c62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c66:	ed82 7a00 	vstr	s14, [r2]
 8004c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6e:	edc2 7a01 	vstr	s15, [r2, #4]
 8004c72:	e798      	b.n	8004ba6 <__kernel_rem_pio2f+0x3d2>
 8004c74:	edd3 7a00 	vldr	s15, [r3]
 8004c78:	edd3 6a01 	vldr	s13, [r3, #4]
 8004c7c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c80:	3a01      	subs	r2, #1
 8004c82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c86:	ed83 7a00 	vstr	s14, [r3]
 8004c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8e:	edc3 7a01 	vstr	s15, [r3, #4]
 8004c92:	e78d      	b.n	8004bb0 <__kernel_rem_pio2f+0x3dc>
 8004c94:	ed33 7a01 	vldmdb	r3!, {s14}
 8004c98:	3c01      	subs	r4, #1
 8004c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c9e:	e78f      	b.n	8004bc0 <__kernel_rem_pio2f+0x3ec>
 8004ca0:	eef1 6a66 	vneg.f32	s13, s13
 8004ca4:	eeb1 7a47 	vneg.f32	s14, s14
 8004ca8:	edc8 6a00 	vstr	s13, [r8]
 8004cac:	ed88 7a01 	vstr	s14, [r8, #4]
 8004cb0:	eef1 7a67 	vneg.f32	s15, s15
 8004cb4:	e790      	b.n	8004bd8 <__kernel_rem_pio2f+0x404>
 8004cb6:	bf00      	nop

08004cb8 <scalbnf>:
 8004cb8:	ee10 3a10 	vmov	r3, s0
 8004cbc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004cc0:	d02b      	beq.n	8004d1a <scalbnf+0x62>
 8004cc2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004cc6:	d302      	bcc.n	8004cce <scalbnf+0x16>
 8004cc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004ccc:	4770      	bx	lr
 8004cce:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004cd2:	d123      	bne.n	8004d1c <scalbnf+0x64>
 8004cd4:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <scalbnf+0xb0>)
 8004cd6:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004d6c <scalbnf+0xb4>
 8004cda:	4298      	cmp	r0, r3
 8004cdc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004ce0:	db17      	blt.n	8004d12 <scalbnf+0x5a>
 8004ce2:	ee10 3a10 	vmov	r3, s0
 8004ce6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004cea:	3a19      	subs	r2, #25
 8004cec:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004cf0:	4288      	cmp	r0, r1
 8004cf2:	dd15      	ble.n	8004d20 <scalbnf+0x68>
 8004cf4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004d70 <scalbnf+0xb8>
 8004cf8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004d74 <scalbnf+0xbc>
 8004cfc:	ee10 3a10 	vmov	r3, s0
 8004d00:	eeb0 7a67 	vmov.f32	s14, s15
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bfb8      	it	lt
 8004d08:	eef0 7a66 	vmovlt.f32	s15, s13
 8004d0c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004d10:	4770      	bx	lr
 8004d12:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004d78 <scalbnf+0xc0>
 8004d16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004d1a:	4770      	bx	lr
 8004d1c:	0dd2      	lsrs	r2, r2, #23
 8004d1e:	e7e5      	b.n	8004cec <scalbnf+0x34>
 8004d20:	4410      	add	r0, r2
 8004d22:	28fe      	cmp	r0, #254	; 0xfe
 8004d24:	dce6      	bgt.n	8004cf4 <scalbnf+0x3c>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	dd06      	ble.n	8004d38 <scalbnf+0x80>
 8004d2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d2e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004d32:	ee00 3a10 	vmov	s0, r3
 8004d36:	4770      	bx	lr
 8004d38:	f110 0f16 	cmn.w	r0, #22
 8004d3c:	da09      	bge.n	8004d52 <scalbnf+0x9a>
 8004d3e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004d78 <scalbnf+0xc0>
 8004d42:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004d7c <scalbnf+0xc4>
 8004d46:	ee10 3a10 	vmov	r3, s0
 8004d4a:	eeb0 7a67 	vmov.f32	s14, s15
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	e7d9      	b.n	8004d06 <scalbnf+0x4e>
 8004d52:	3019      	adds	r0, #25
 8004d54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d58:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004d5c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004d80 <scalbnf+0xc8>
 8004d60:	ee07 3a90 	vmov	s15, r3
 8004d64:	e7d7      	b.n	8004d16 <scalbnf+0x5e>
 8004d66:	bf00      	nop
 8004d68:	ffff3cb0 	.word	0xffff3cb0
 8004d6c:	4c000000 	.word	0x4c000000
 8004d70:	7149f2ca 	.word	0x7149f2ca
 8004d74:	f149f2ca 	.word	0xf149f2ca
 8004d78:	0da24260 	.word	0x0da24260
 8004d7c:	8da24260 	.word	0x8da24260
 8004d80:	33000000 	.word	0x33000000

08004d84 <floorf>:
 8004d84:	ee10 3a10 	vmov	r3, s0
 8004d88:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d8c:	3a7f      	subs	r2, #127	; 0x7f
 8004d8e:	2a16      	cmp	r2, #22
 8004d90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d94:	dc2a      	bgt.n	8004dec <floorf+0x68>
 8004d96:	2a00      	cmp	r2, #0
 8004d98:	da11      	bge.n	8004dbe <floorf+0x3a>
 8004d9a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004dfc <floorf+0x78>
 8004d9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004da2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004daa:	dd05      	ble.n	8004db8 <floorf+0x34>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da23      	bge.n	8004df8 <floorf+0x74>
 8004db0:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <floorf+0x7c>)
 8004db2:	2900      	cmp	r1, #0
 8004db4:	bf18      	it	ne
 8004db6:	4613      	movne	r3, r2
 8004db8:	ee00 3a10 	vmov	s0, r3
 8004dbc:	4770      	bx	lr
 8004dbe:	4911      	ldr	r1, [pc, #68]	; (8004e04 <floorf+0x80>)
 8004dc0:	4111      	asrs	r1, r2
 8004dc2:	420b      	tst	r3, r1
 8004dc4:	d0fa      	beq.n	8004dbc <floorf+0x38>
 8004dc6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004dfc <floorf+0x78>
 8004dca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004dce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd6:	ddef      	ble.n	8004db8 <floorf+0x34>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bfbe      	ittt	lt
 8004ddc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004de0:	fa40 f202 	asrlt.w	r2, r0, r2
 8004de4:	189b      	addlt	r3, r3, r2
 8004de6:	ea23 0301 	bic.w	r3, r3, r1
 8004dea:	e7e5      	b.n	8004db8 <floorf+0x34>
 8004dec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004df0:	d3e4      	bcc.n	8004dbc <floorf+0x38>
 8004df2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004df6:	4770      	bx	lr
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e7dd      	b.n	8004db8 <floorf+0x34>
 8004dfc:	7149f2ca 	.word	0x7149f2ca
 8004e00:	bf800000 	.word	0xbf800000
 8004e04:	007fffff 	.word	0x007fffff

08004e08 <_init>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	bf00      	nop
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr

08004e14 <_fini>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	bf00      	nop
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr
